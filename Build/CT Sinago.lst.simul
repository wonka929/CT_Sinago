***********************************************************************
*
*	CODE GENERATION LISTING FOR: CT Sinago
*	COMPILER VERSION: 3.1.1.0
*
***********************************************************************

***********************************************************************
UNUSED FUNCTIONS:

	SysSpyData
	SysLWVarsnprintf
	SysVarsnprintf
	SysVarfprintf
	SysVarsscanf
	Sysrename
	Sysremove
	Sysfilelength
	Sysfopen
	SysPCodeAccept
	SysGetTxBSize
	SysGetRxBSize
	SysGetOSpace
	SysGetIChars
	VarSwap
	IEE754DoubleToFloat
	ResistorValue
	VaPotentiometer
	VBitTest
	VBitSet
	VarToLEArray
	VarToBEArray
	LEArrayToVar
	BEArrayToVar
	GetPolynomialCRC
	ValueScale
	Linearize
	GetISO1155Crc
***********************************************************************

***********************************************************************
UNUSED FUNCTION BLOCKS:

	SysGetIpInfos
	SysIPReach
	SysDirListing
	SysGetCrc
	eTOF
	eTP
	SR
	RS
	CTUD
	CTD
	CTU
	MBTHLThermostat
	ACModbus
	InvtGD20EU
	SensitSTHC102
	EastronSDM630_v2
	EastronSDM120_v2
	StepRelay
	CLIClient
	LRamp
	HMIAInOnePicoface
	ModbusMaster
	DewPointCalculator
	PWMOut_v1
	ModbusConversion
	Wiegand26Dcd
	BufferModified
	OnOffCycle_v1
	StrainGaugeAcq
	ModbusSlave_v1
	HIDClkDtaReader
	BlinkValue
	Average
	IEC62056_21Rd
	PIDMng_v1
	IODataExchange
	IOEncoder
	WordToDouble
	WordToByte
	DoubleToWord
	ByteToWord
	ByteToBit
	BitToByte
	BLINK
***********************************************************************

**************************************************
	List function block: F_TRIG
**************************************************

FUNCTION_BLOCK F_TRIG

	{ DE:"(Sfr053c000) eLLabStdLib - Falling edge detector" }

        VAR_INPUT
CLK : BOOL;	{ DE:"Clock signal" }
	END_VAR

        VAR_OUTPUT
Q : BOOL;	{ DE:"Output" }
	END_VAR

        VAR
CLKMemo : BOOL := FALSE;	{ DE:"Clock memo" }
	END_VAR

END_FUNCTION_BLOCK

059B0100  55                            push ebp
059B0101  8B EB                         mov ebp, ebx

059B0103  33 C0                         xor eax, eax
059B0105  8A 45 01                      mov al, 1[ebp]
059B0108  84 C0                         test al, al
059B010A  0F 94 C0                      sete al

059B010D  33 C9                         xor ecx, ecx
059B010F  8A 4D 00                      mov cl, [ebp]
059B0112  23 C1                         and eax, ecx

059B0114  84 C0                         test al, al
059B0116  0F 95 45 02                   setne 2[ebp]

059B011A  33 C0                         xor eax, eax
059B011C  8A 45 01                      mov al, 1[ebp]

059B011F  84 C0                         test al, al
059B0121  0F 95 45 00                   setne [ebp]

059B0125  5D                            pop ebp

059B0126  C3                            ret


Frame allocation:

	0000 bit  0: VAR CLKMemo
	0001 bit  0: VAR CLK
	0002 bit  0: VAR Q

END_FUNCTION_BLOCK
**************************************************
	List function block: R_TRIG
**************************************************

FUNCTION_BLOCK R_TRIG

	{ DE:"(Sfr053c000) eLLabStdLib - Rising edge detector" }

        VAR_INPUT
CLK : BOOL;	{ DE:"Clock signal" }
	END_VAR

        VAR_OUTPUT
Q : BOOL;	{ DE:"Output" }
	END_VAR

        VAR
CLKMemo : BOOL := FALSE;	{ DE:"Clock memo" }
	END_VAR

END_FUNCTION_BLOCK

059B0127  55                            push ebp
059B0128  8B EB                         mov ebp, ebx

059B012A  33 C0                         xor eax, eax
059B012C  8A 45 01                      mov al, 1[ebp]

059B012F  33 C9                         xor ecx, ecx
059B0131  8A 4D 00                      mov cl, [ebp]
059B0134  84 C9                         test cl, cl
059B0136  0F 94 C1                      sete cl
059B0139  23 C1                         and eax, ecx

059B013B  84 C0                         test al, al
059B013D  0F 95 45 02                   setne 2[ebp]

059B0141  33 C0                         xor eax, eax
059B0143  8A 45 01                      mov al, 1[ebp]

059B0146  84 C0                         test al, al
059B0148  0F 95 45 00                   setne [ebp]

059B014C  5D                            pop ebp

059B014D  C3                            ret


Frame allocation:

	0000 bit  0: VAR CLKMemo
	0001 bit  0: VAR CLK
	0002 bit  0: VAR Q

END_FUNCTION_BLOCK
**************************************************
	List function block: eTON
**************************************************

FUNCTION_BLOCK eTON

	{ DE:"(Sfr053c000) eLLabStdLib - On delay timer" }

        VAR_INPUT
IN : BOOL;	{ DE:"Timer input" }
PT : UDINT;	{ DE:"Preset time value (mS)" }
	END_VAR

        VAR_OUTPUT
Q : BOOL;	{ DE:"Delayed output" }
ET : UDINT;	{ DE:"Executing time (mS)" }
	END_VAR

        VAR_EXTERNAL
	{G:"SystemVariables"}
SysTime AT %MB0.320 : UDINT;	{ DE:"System time [mS]" }
	END_VAR

        VAR
TimeBf : UDINT;	{ DE:"Time buffer" }
	END_VAR

END_FUNCTION_BLOCK

059B014E  55                            push ebp
059B014F  8B EB                         mov ebp, ebx

059B0151  33 C0                         xor eax, eax
059B0153  8A 45 04                      mov al, 4[ebp]

059B0156  84 C0                         test al, al
059B0158  0F 94 C0                      sete al

059B015B  84 C0                         test al, al
059B015D  90 74 24 90 90 90             je 059B0184H

059B0163  8B 05 CC CC CC CC             mov eax, [CCCCCCCCH] ; %M0+320
059B0169  89 45 00                      mov [ebp], eax

059B016C  B8 00 00 00 00                mov eax, 00H
059B0171  84 C0                         test al, al
059B0173  0F 95 45 09                   setne 9[ebp]

059B0177  B8 00 00 00 00                mov eax, 00H
059B017C  89 45 0A                      mov 10[ebp], eax

059B017F  EB 69 90 90 90                jmp 059B01EAH

059B0184  33 C0                         xor eax, eax
059B0186  8A 45 09                      mov al, 9[ebp]

059B0189  84 C0                         test al, al
059B018B  90 74 29 90 90 90             je 059B01B7H

059B0191  8B 45 05                      mov eax, 5[ebp]

059B0194  3B 45 0A                      cmp eax, [ebp+10]
059B0197  0F 97 C0                      seta al
059B019A  25 FF 00 00 00                and eax, 0FFh

059B019F  84 C0                         test al, al
059B01A1  90 74 0E 90 90 90             je 059B01B2H

059B01A7  B8 00 00 00 00                mov eax, 00H
059B01AC  84 C0                         test al, al
059B01AE  0F 95 45 09                   setne 9[ebp]

059B01B2  EB 36 90 90 90                jmp 059B01EAH

059B01B7  8B 05 CC CC CC CC             mov eax, [CCCCCCCCH] ; %M0+320

059B01BD  2B 45 00                      sub eax, [ebp]

059B01C0  89 45 0A                      mov 10[ebp], eax

059B01C3  8B 45 0A                      mov eax, 10[ebp]

059B01C6  3B 45 05                      cmp eax, [ebp+5]
059B01C9  0F 93 C0                      setae al
059B01CC  25 FF 00 00 00                and eax, 0FFh

059B01D1  84 C0                         test al, al
059B01D3  90 74 14 90 90 90             je 059B01EAH

059B01D9  B8 01 00 00 00                mov eax, 01H
059B01DE  84 C0                         test al, al
059B01E0  0F 95 45 09                   setne 9[ebp]

059B01E4  8B 45 05                      mov eax, 5[ebp]
059B01E7  89 45 0A                      mov 10[ebp], eax

059B01EA  5D                            pop ebp

059B01EB  C3                            ret


Frame allocation:

	0000       : VAR TimeBf
	0004 bit  0: VAR IN
	0005       : VAR PT
	0009 bit  0: VAR Q
	000A       : VAR ET

END_FUNCTION_BLOCK
**************************************************
	List function block: HHMM_to_MM
**************************************************

FUNCTION_BLOCK HHMM_to_MM

        VAR_INPUT
HH_on1 : INT := 0;
MM_on1 : INT := 0;
HH_off1 : INT := 0;
MM_off1 : INT := 0;
HH_on2 : INT := 0;
MM_on2 : INT := 0;
HH_off2 : INT := 0;
MM_off2 : INT := 0;
	END_VAR

        VAR_OUTPUT
MMs_on1 : INT := 0;
MMs_off1 : INT := 0;
MMs_on2 : INT := 0;
MMs_off2 : INT := 0;
	END_VAR

END_FUNCTION_BLOCK

059B01EC  55                            push ebp
059B01ED  8B EB                         mov ebp, ebx

#0		{SRC:HHMM_to_MM}
#1		(*$WAITSWITCH$*)
#2		
#3		
#4			(* IF HH_on1 > 0 OR HH_on2 > 0 *)
#5			LD		HH_on2	{LNXT:1|-1|-1}
(*) UNDEF
059B01EF  0F BF 45 08                   movsx eax, word ptr 8[ebp]

#6			GT		0	{LNXT:1|-1|-1}
(*) INT
059B01F3  3D 00 00 00 00                cmp eax, 0
059B01F8  0F 9F C0                      setg al
059B01FB  25 FF 00 00 00                and eax, 0FFh

#7			OR(		HH_on1	{LNXT:1|-1|-1}
(*) BOOL
059B0200  50                            push eax
059B0201  0F BF 45 00                   movsx eax, word ptr [ebp]

#8			GT		0	{LNXT:1|-1|-1}
(*) INT
059B0205  3D 00 00 00 00                cmp eax, 0
059B020A  0F 9F C0                      setg al
059B020D  25 FF 00 00 00                and eax, 0FFh

#9			)	{LNXT:1|-1|-1}
(*) BOOL
059B0212  8B C8                         mov ecx, eax
059B0214  58                            pop eax
059B0215  0B C1                         or eax, ecx

#10			JMPCN	$label0	{LNXT:1|3|9}
(-) BOOL
059B0217  84 C0                         test al, al
059B0219  90 74 5C 90 90 90             je 059B0278H

#11		
#12			(* THEN *)
#13		
#14				(* MMs_on1 := HH_on1 * 60 + MM_on1; *)
#15				LD		HH_on1	{LNXT:3|4|-1}
(*) UNDEF
059B021F  0F BF 45 00                   movsx eax, word ptr [ebp]

#16				MUL		60	{LNXT:3|4|-1}
(*) INT
059B0223  B9 3C 00 00 00                mov ecx, 60
059B0228  F7 E9                         imul ecx

#17				ADD		MM_on1	{LNXT:3|4|-1}
(*) INT
059B022A  0F BF 4D 02                   movsx ecx, word ptr 2[ebp]
059B022E  03 C1                         add eax, ecx

#18				ST		MMs_on1	{LNXT:3|4|-1}
(*) INT
059B0230  66 89 45 10                   mov 16[ebp], ax

#19		
#20				(* MMs_off1 := HH_off1 * 60 + MM_off1; *)
#21				LD		HH_off1	{LNXT:4|5|-1}
(*) UNDEF
059B0234  0F BF 45 04                   movsx eax, word ptr 4[ebp]

#22				MUL		60	{LNXT:4|5|-1}
(*) INT
059B0238  B9 3C 00 00 00                mov ecx, 60
059B023D  F7 E9                         imul ecx

#23				ADD		MM_off1	{LNXT:4|5|-1}
(*) INT
059B023F  0F BF 4D 06                   movsx ecx, word ptr 6[ebp]
059B0243  03 C1                         add eax, ecx

#24				ST		MMs_off1	{LNXT:4|5|-1}
(*) INT
059B0245  66 89 45 12                   mov 18[ebp], ax

#25		
#26				(* MMs_on2 := HH_on2 * 60 + MM_on2; *)
#27				LD		HH_on2	{LNXT:5|6|-1}
(*) UNDEF
059B0249  0F BF 45 08                   movsx eax, word ptr 8[ebp]

#28				MUL		60	{LNXT:5|6|-1}
(*) INT
059B024D  B9 3C 00 00 00                mov ecx, 60
059B0252  F7 E9                         imul ecx

#29				ADD		MM_on2	{LNXT:5|6|-1}
(*) INT
059B0254  0F BF 4D 0A                   movsx ecx, word ptr 10[ebp]
059B0258  03 C1                         add eax, ecx

#30				ST		MMs_on2	{LNXT:5|6|-1}
(*) INT
059B025A  66 89 45 14                   mov 20[ebp], ax

#31		
#32				(* MMs_off2 := HH_off2 * 60 + MM_off2; *)
#33				LD		HH_off2	{LNXT:6|-1|-1}
(*) UNDEF
059B025E  0F BF 45 0C                   movsx eax, word ptr 12[ebp]

#34				MUL		60	{LNXT:6|-1|-1}
(*) INT
059B0262  B9 3C 00 00 00                mov ecx, 60
059B0267  F7 E9                         imul ecx

#35				ADD		MM_off2	{LNXT:6|-1|-1}
(*) INT
059B0269  0F BF 4D 0E                   movsx ecx, word ptr 14[ebp]
059B026D  03 C1                         add eax, ecx

#36				ST		MMs_off2	{LNXT:6|-1|-1}
(*) INT
059B026F  66 89 45 16                   mov 22[ebp], ax

#37				JMP		$label1	{LNXT:1|3|9}
(-) INT
059B0273  EB 03 90 90 90                jmp 059B0278H

#38		$label0:
#39		
#40			(* ELSE *)
#41		
#42				(* RETURN *)
#43				RET
#44		
(-) INT
059B0278  5D                            pop ebp

059B0279  C3                            ret


Frame allocation:

	0000       : VAR HH_on1
	0002       : VAR MM_on1
	0004       : VAR HH_off1
	0006       : VAR MM_off1
	0008       : VAR HH_on2
	000A       : VAR MM_on2
	000C       : VAR HH_off2
	000E       : VAR MM_off2
	0010       : VAR MMs_on1
	0012       : VAR MMs_off1
	0014       : VAR MMs_on2
	0016       : VAR MMs_off2

END_FUNCTION_BLOCK
**************************************************
	List function block: OnOffCalendar
**************************************************

FUNCTION_BLOCK OnOffCalendar

        VAR_INPUT
Giorno_settimana : INT;
Ora : INT;
Minuto : INT;
P11On : INT := 480;
P12Off : INT := 750;
P13On : INT := 840;
P14Off : INT := 1080;
P21On : INT := 480;
P22Off : INT := 750;
P23On : INT := 840;
P24Off : INT := 1080;
P31On : INT := 480;
P32Off : INT := 750;
P33On : INT := 840;
P34Off : INT := 1080;
P41On : INT := 480;
P42Off : INT := 750;
P43On : INT := 840;
P44Off : INT := 1080;
P51On : INT := 480;
P52Off : INT := 750;
P53On : INT := 840;
P54Off : INT := 1080;
P61On : INT := 480;
P62Off : INT := 750;
P63On : INT := 840;
P64Off : INT := 1080;
P71On : INT := 480;
P72Off : INT := 750;
P73On : INT := 840;
P74Off : INT := 1080;
Lun_enabled : BOOL := TRUE;
Mar_enabled : BOOL := TRUE;
Mer_enabled : BOOL := TRUE;
Gio_enabled : BOOL := TRUE;
Ven_enabled : BOOL := TRUE;
Sab_enabled : BOOL := FALSE;
Dom_enabled : BOOL := FALSE;
	END_VAR

        VAR_OUTPUT
OnByCalendar : BOOL;
	END_VAR

        VAR
NOW : INT;
	END_VAR

END_FUNCTION_BLOCK

059B027A  55                            push ebp
059B027B  8B EB                         mov ebp, ebx

#0		{SRC:OnOffCalendar}
#1		(*$WAITSWITCH$*)
#2		
#3			(* NOW := Ora*60+Minuto; *)
#4			LD		Ora	{LNXT:1|4|-1}
(*) UNDEF
059B027D  0F BF 45 04                   movsx eax, word ptr 4[ebp]

#5			MUL		60	{LNXT:1|4|-1}
(*) INT
059B0281  B9 3C 00 00 00                mov ecx, 60
059B0286  F7 E9                         imul ecx

#6			ADD		Minuto	{LNXT:1|4|-1}
(*) INT
059B0288  0F BF 4D 06                   movsx ecx, word ptr 6[ebp]
059B028C  03 C1                         add eax, ecx

#7			ST		NOW	{LNXT:1|4|-1}
(*) INT
059B028E  66 89 45 00                   mov [ebp], ax

#8		
#9		
#10			(* CASE Giorno_settimana OF *)
#11		
#12			(* 1: *)
#13			LD		Giorno_settimana	{LNXT:4|-1|-1}
(*) UNDEF
059B0292  0F BF 45 02                   movsx eax, word ptr 2[ebp]

#14			EQ		1	{LNXT:4|-1|-1}
(*) INT
059B0296  3D 01 00 00 00                cmp eax, 1
059B029B  0F 94 C0                      sete al
059B029E  25 FF 00 00 00                and eax, 0FFh

#15			JMPC		$label1	{LNXT:4|5|13}
(-) BOOL
059B02A3  84 C0                         test al, al
059B02A5  0F 85 9B 00 00 00             jne 059B0346H

#16		
#17			(* 2: *)
#18			LD		Giorno_settimana	{LNXT:13|-1|-1}
(*) UNDEF
059B02AB  0F BF 45 02                   movsx eax, word ptr 2[ebp]

#19			EQ		2	{LNXT:13|-1|-1}
(*) INT
059B02AF  3D 02 00 00 00                cmp eax, 2
059B02B4  0F 94 C0                      sete al
059B02B7  25 FF 00 00 00                and eax, 0FFh

#20			JMPC		$label2	{LNXT:13|14|22}
(-) BOOL
059B02BC  84 C0                         test al, al
059B02BE  0F 85 24 01 00 00             jne 059B03E8H

#21		
#22			(* 3: *)
#23			LD		Giorno_settimana	{LNXT:22|-1|-1}
(*) UNDEF
059B02C4  0F BF 45 02                   movsx eax, word ptr 2[ebp]

#24			EQ		3	{LNXT:22|-1|-1}
(*) INT
059B02C8  3D 03 00 00 00                cmp eax, 3
059B02CD  0F 94 C0                      sete al
059B02D0  25 FF 00 00 00                and eax, 0FFh

#25			JMPC		$label3	{LNXT:22|23|31}
(-) BOOL
059B02D5  84 C0                         test al, al
059B02D7  0F 85 AD 01 00 00             jne 059B048AH

#26		
#27			(* 4: *)
#28			LD		Giorno_settimana	{LNXT:31|-1|-1}
(*) UNDEF
059B02DD  0F BF 45 02                   movsx eax, word ptr 2[ebp]

#29			EQ		4	{LNXT:31|-1|-1}
(*) INT
059B02E1  3D 04 00 00 00                cmp eax, 4
059B02E6  0F 94 C0                      sete al
059B02E9  25 FF 00 00 00                and eax, 0FFh

#30			JMPC		$label4	{LNXT:31|32|40}
(-) BOOL
059B02EE  84 C0                         test al, al
059B02F0  0F 85 36 02 00 00             jne 059B052CH

#31		
#32			(* 5: *)
#33			LD		Giorno_settimana	{LNXT:40|-1|-1}
(*) UNDEF
059B02F6  0F BF 45 02                   movsx eax, word ptr 2[ebp]

#34			EQ		5	{LNXT:40|-1|-1}
(*) INT
059B02FA  3D 05 00 00 00                cmp eax, 5
059B02FF  0F 94 C0                      sete al
059B0302  25 FF 00 00 00                and eax, 0FFh

#35			JMPC		$label5	{LNXT:40|41|49}
(-) BOOL
059B0307  84 C0                         test al, al
059B0309  0F 85 BF 02 00 00             jne 059B05CEH

#36		
#37			(* 6: *)
#38			LD		Giorno_settimana	{LNXT:49|-1|-1}
(*) UNDEF
059B030F  0F BF 45 02                   movsx eax, word ptr 2[ebp]

#39			EQ		6	{LNXT:49|-1|-1}
(*) INT
059B0313  3D 06 00 00 00                cmp eax, 6
059B0318  0F 94 C0                      sete al
059B031B  25 FF 00 00 00                and eax, 0FFh

#40			JMPC		$label6	{LNXT:49|50|58}
(-) BOOL
059B0320  84 C0                         test al, al
059B0322  0F 85 48 03 00 00             jne 059B0670H

#41		
#42			(* 7: *)
#43			LD		Giorno_settimana	{LNXT:58|-1|-1}
(*) UNDEF
059B0328  0F BF 45 02                   movsx eax, word ptr 2[ebp]

#44			EQ		7	{LNXT:58|-1|-1}
(*) INT
059B032C  3D 07 00 00 00                cmp eax, 7
059B0331  0F 94 C0                      sete al
059B0334  25 FF 00 00 00                and eax, 0FFh

#45			JMPC		$label7	{LNXT:58|59|68}
(-) BOOL
059B0339  84 C0                         test al, al
059B033B  0F 85 D1 03 00 00             jne 059B0712H

#46		
#47			(* ELSE *)
#48			JMP		$label8	{LNXT:58|59|68}
(-) BOOL
059B0341  E9 6E 04 00 00                jmp 059B07B4H

#49		
#50			(* Istruzioni di ciascun CASE: *)
#51		
#52		$label1:
#53		
#54				(* IF NOW >= P11On AND NOW < P12Off AND Lun_enabled *)
#55				LD		NOW	{LNXT:5|-1|-1}
(*) UNDEF
059B0346  0F BF 45 00                   movsx eax, word ptr [ebp]

#56				LT		P12Off	{LNXT:5|-1|-1}
(*) INT
059B034A  0F BF 4D 0A                   movsx ecx, word ptr 10[ebp]
059B034E  3B C1                         cmp eax, ecx
059B0350  0F 9C C0                      setl al
059B0353  25 FF 00 00 00                and eax, 0FFh

#57				AND(		NOW	{LNXT:5|-1|-1}
(*) BOOL
059B0358  50                            push eax
059B0359  0F BF 45 00                   movsx eax, word ptr [ebp]

#58				GE		P11On	{LNXT:5|-1|-1}
(*) INT
059B035D  0F BF 4D 08                   movsx ecx, word ptr 8[ebp]
059B0361  3B C1                         cmp eax, ecx
059B0363  0F 9D C0                      setge al
059B0366  25 FF 00 00 00                and eax, 0FFh

#59				)	{LNXT:5|-1|-1}
(*) BOOL
059B036B  8B C8                         mov ecx, eax
059B036D  58                            pop eax
059B036E  23 C1                         and eax, ecx

#60				AND		Lun_enabled	{LNXT:5|-1|-1}
(*) BOOL
059B0370  33 C9                         xor ecx, ecx
059B0372  8A 4D 40                      mov cl, 64[ebp]
059B0375  23 C1                         and eax, ecx

#61				JMPCN	$label9	{LNXT:5|6|7}
(-) BOOL
059B0377  84 C0                         test al, al
059B0379  90 74 13 90 90 90             je 059B038FH

#62		
#63				(* THEN *)
#64		
#65					(* OnByCalendar := TRUE; *)
#66					MOVE		TRUE,OnByCalendar	{LNXT:6|-1|-1}
(*) BOOL
059B037F  B8 01 00 00 00                mov eax, 01H
059B0384  84 C0                         test al, al
059B0386  0F 95 45 47                   setne 71[ebp]

#67					JMP		$label11	{LNXT:5|6|7}
(-) BOOL
059B038A  EB 57 90 90 90                jmp 059B03E3H

#68		$label9:
#69		
#70				(* ELSIF NOW >= P13On AND NOW < P14Off AND Lun_enabled *)
#71				LD		NOW	{LNXT:7|-1|-1}
(*) UNDEF
059B038F  0F BF 45 00                   movsx eax, word ptr [ebp]

#72				LT		P14Off	{LNXT:7|-1|-1}
(*) INT
059B0393  0F BF 4D 0E                   movsx ecx, word ptr 14[ebp]
059B0397  3B C1                         cmp eax, ecx
059B0399  0F 9C C0                      setl al
059B039C  25 FF 00 00 00                and eax, 0FFh

#73				AND(		NOW	{LNXT:7|-1|-1}
(*) BOOL
059B03A1  50                            push eax
059B03A2  0F BF 45 00                   movsx eax, word ptr [ebp]

#74				GE		P13On	{LNXT:7|-1|-1}
(*) INT
059B03A6  0F BF 4D 0C                   movsx ecx, word ptr 12[ebp]
059B03AA  3B C1                         cmp eax, ecx
059B03AC  0F 9D C0                      setge al
059B03AF  25 FF 00 00 00                and eax, 0FFh

#75				)	{LNXT:7|-1|-1}
(*) BOOL
059B03B4  8B C8                         mov ecx, eax
059B03B6  58                            pop eax
059B03B7  23 C1                         and eax, ecx

#76				AND		Lun_enabled	{LNXT:7|-1|-1}
(*) BOOL
059B03B9  33 C9                         xor ecx, ecx
059B03BB  8A 4D 40                      mov cl, 64[ebp]
059B03BE  23 C1                         and eax, ecx

#77				JMPCN	$label10	{LNXT:7|8|10}
(-) BOOL
059B03C0  84 C0                         test al, al
059B03C2  90 74 13 90 90 90             je 059B03D8H

#78		
#79				(* THEN *)
#80		
#81					(* OnByCalendar := TRUE; *)
#82					MOVE		TRUE,OnByCalendar	{LNXT:8|-1|-1}
(*) BOOL
059B03C8  B8 01 00 00 00                mov eax, 01H
059B03CD  84 C0                         test al, al
059B03CF  0F 95 45 47                   setne 71[ebp]

#83					JMP		$label11	{LNXT:7|8|10}
(-) BOOL
059B03D3  EB 0E 90 90 90                jmp 059B03E3H

#84		$label10:
#85		
#86				(* ELSE *)
#87		
#88					(* OnByCalendar := FALSE; *)
#89					MOVE		FALSE,OnByCalendar	{LNXT:10|-1|-1}
(*) BOOL
059B03D8  B8 00 00 00 00                mov eax, 00H
059B03DD  84 C0                         test al, al
059B03DF  0F 95 45 47                   setne 71[ebp]

#90		
#91		$label11:
#92				(* END_IF *)
#93				JMP		$label0	{LNXT:1|10|-1}
(-) BOOL
059B03E3  E9 D7 03 00 00                jmp 059B07BFH

#94		
#95		$label2:
#96		
#97				(* IF NOW >= P21On AND NOW < P22Off AND Mar_enabled *)
#98				LD		NOW	{LNXT:14|-1|-1}
(*) UNDEF
059B03E8  0F BF 45 00                   movsx eax, word ptr [ebp]

#99				LT		P22Off	{LNXT:14|-1|-1}
(*) INT
059B03EC  0F BF 4D 12                   movsx ecx, word ptr 18[ebp]
059B03F0  3B C1                         cmp eax, ecx
059B03F2  0F 9C C0                      setl al
059B03F5  25 FF 00 00 00                and eax, 0FFh

#100				AND(		NOW	{LNXT:14|-1|-1}
(*) BOOL
059B03FA  50                            push eax
059B03FB  0F BF 45 00                   movsx eax, word ptr [ebp]

#101				GE		P21On	{LNXT:14|-1|-1}
(*) INT
059B03FF  0F BF 4D 10                   movsx ecx, word ptr 16[ebp]
059B0403  3B C1                         cmp eax, ecx
059B0405  0F 9D C0                      setge al
059B0408  25 FF 00 00 00                and eax, 0FFh

#102				)	{LNXT:14|-1|-1}
(*) BOOL
059B040D  8B C8                         mov ecx, eax
059B040F  58                            pop eax
059B0410  23 C1                         and eax, ecx

#103				AND		Mar_enabled	{LNXT:14|-1|-1}
(*) BOOL
059B0412  33 C9                         xor ecx, ecx
059B0414  8A 4D 41                      mov cl, 65[ebp]
059B0417  23 C1                         and eax, ecx

#104				JMPCN	$label12	{LNXT:14|15|16}
(-) BOOL
059B0419  84 C0                         test al, al
059B041B  90 74 13 90 90 90             je 059B0431H

#105		
#106				(* THEN *)
#107		
#108					(* OnByCalendar := TRUE; *)
#109					MOVE		TRUE,OnByCalendar	{LNXT:15|-1|-1}
(*) BOOL
059B0421  B8 01 00 00 00                mov eax, 01H
059B0426  84 C0                         test al, al
059B0428  0F 95 45 47                   setne 71[ebp]

#110					JMP		$label14	{LNXT:14|15|16}
(-) BOOL
059B042C  EB 57 90 90 90                jmp 059B0485H

#111		$label12:
#112		
#113				(* ELSIF NOW >= P23On AND NOW < P24Off AND Mar_enabled *)
#114				LD		NOW	{LNXT:16|-1|-1}
(*) UNDEF
059B0431  0F BF 45 00                   movsx eax, word ptr [ebp]

#115				LT		P24Off	{LNXT:16|-1|-1}
(*) INT
059B0435  0F BF 4D 16                   movsx ecx, word ptr 22[ebp]
059B0439  3B C1                         cmp eax, ecx
059B043B  0F 9C C0                      setl al
059B043E  25 FF 00 00 00                and eax, 0FFh

#116				AND(		NOW	{LNXT:16|-1|-1}
(*) BOOL
059B0443  50                            push eax
059B0444  0F BF 45 00                   movsx eax, word ptr [ebp]

#117				GE		P23On	{LNXT:16|-1|-1}
(*) INT
059B0448  0F BF 4D 14                   movsx ecx, word ptr 20[ebp]
059B044C  3B C1                         cmp eax, ecx
059B044E  0F 9D C0                      setge al
059B0451  25 FF 00 00 00                and eax, 0FFh

#118				)	{LNXT:16|-1|-1}
(*) BOOL
059B0456  8B C8                         mov ecx, eax
059B0458  58                            pop eax
059B0459  23 C1                         and eax, ecx

#119				AND		Mar_enabled	{LNXT:16|-1|-1}
(*) BOOL
059B045B  33 C9                         xor ecx, ecx
059B045D  8A 4D 41                      mov cl, 65[ebp]
059B0460  23 C1                         and eax, ecx

#120				JMPCN	$label13	{LNXT:16|17|19}
(-) BOOL
059B0462  84 C0                         test al, al
059B0464  90 74 13 90 90 90             je 059B047AH

#121		
#122				(* THEN *)
#123		
#124					(* OnByCalendar := TRUE; *)
#125					MOVE		TRUE,OnByCalendar	{LNXT:17|-1|-1}
(*) BOOL
059B046A  B8 01 00 00 00                mov eax, 01H
059B046F  84 C0                         test al, al
059B0471  0F 95 45 47                   setne 71[ebp]

#126					JMP		$label14	{LNXT:16|17|19}
(-) BOOL
059B0475  EB 0E 90 90 90                jmp 059B0485H

#127		$label13:
#128		
#129				(* ELSE *)
#130		
#131					(* OnByCalendar := FALSE; *)
#132					MOVE		FALSE,OnByCalendar	{LNXT:19|-1|-1}
(*) BOOL
059B047A  B8 00 00 00 00                mov eax, 00H
059B047F  84 C0                         test al, al
059B0481  0F 95 45 47                   setne 71[ebp]

#133		
#134		$label14:
#135				(* END_IF *)
#136				JMP		$label0	{LNXT:1|19|-1}
(-) BOOL
059B0485  E9 35 03 00 00                jmp 059B07BFH

#137		
#138		$label3:
#139		
#140				(* IF NOW >= P31On AND NOW < P32Off AND Mer_enabled *)
#141				LD		NOW	{LNXT:23|-1|-1}
(*) UNDEF
059B048A  0F BF 45 00                   movsx eax, word ptr [ebp]

#142				LT		P32Off	{LNXT:23|-1|-1}
(*) INT
059B048E  0F BF 4D 1A                   movsx ecx, word ptr 26[ebp]
059B0492  3B C1                         cmp eax, ecx
059B0494  0F 9C C0                      setl al
059B0497  25 FF 00 00 00                and eax, 0FFh

#143				AND(		NOW	{LNXT:23|-1|-1}
(*) BOOL
059B049C  50                            push eax
059B049D  0F BF 45 00                   movsx eax, word ptr [ebp]

#144				GE		P31On	{LNXT:23|-1|-1}
(*) INT
059B04A1  0F BF 4D 18                   movsx ecx, word ptr 24[ebp]
059B04A5  3B C1                         cmp eax, ecx
059B04A7  0F 9D C0                      setge al
059B04AA  25 FF 00 00 00                and eax, 0FFh

#145				)	{LNXT:23|-1|-1}
(*) BOOL
059B04AF  8B C8                         mov ecx, eax
059B04B1  58                            pop eax
059B04B2  23 C1                         and eax, ecx

#146				AND		Mer_enabled	{LNXT:23|-1|-1}
(*) BOOL
059B04B4  33 C9                         xor ecx, ecx
059B04B6  8A 4D 42                      mov cl, 66[ebp]
059B04B9  23 C1                         and eax, ecx

#147				JMPCN	$label15	{LNXT:23|24|25}
(-) BOOL
059B04BB  84 C0                         test al, al
059B04BD  90 74 13 90 90 90             je 059B04D3H

#148		
#149				(* THEN *)
#150		
#151					(* OnByCalendar := TRUE; *)
#152					MOVE		TRUE,OnByCalendar	{LNXT:24|-1|-1}
(*) BOOL
059B04C3  B8 01 00 00 00                mov eax, 01H
059B04C8  84 C0                         test al, al
059B04CA  0F 95 45 47                   setne 71[ebp]

#153					JMP		$label17	{LNXT:23|24|25}
(-) BOOL
059B04CE  EB 57 90 90 90                jmp 059B0527H

#154		$label15:
#155		
#156				(* ELSIF NOW >= P33On AND NOW < P34Off AND Mer_enabled *)
#157				LD		NOW	{LNXT:25|-1|-1}
(*) UNDEF
059B04D3  0F BF 45 00                   movsx eax, word ptr [ebp]

#158				LT		P34Off	{LNXT:25|-1|-1}
(*) INT
059B04D7  0F BF 4D 1E                   movsx ecx, word ptr 30[ebp]
059B04DB  3B C1                         cmp eax, ecx
059B04DD  0F 9C C0                      setl al
059B04E0  25 FF 00 00 00                and eax, 0FFh

#159				AND(		NOW	{LNXT:25|-1|-1}
(*) BOOL
059B04E5  50                            push eax
059B04E6  0F BF 45 00                   movsx eax, word ptr [ebp]

#160				GE		P33On	{LNXT:25|-1|-1}
(*) INT
059B04EA  0F BF 4D 1C                   movsx ecx, word ptr 28[ebp]
059B04EE  3B C1                         cmp eax, ecx
059B04F0  0F 9D C0                      setge al
059B04F3  25 FF 00 00 00                and eax, 0FFh

#161				)	{LNXT:25|-1|-1}
(*) BOOL
059B04F8  8B C8                         mov ecx, eax
059B04FA  58                            pop eax
059B04FB  23 C1                         and eax, ecx

#162				AND		Mer_enabled	{LNXT:25|-1|-1}
(*) BOOL
059B04FD  33 C9                         xor ecx, ecx
059B04FF  8A 4D 42                      mov cl, 66[ebp]
059B0502  23 C1                         and eax, ecx

#163				JMPCN	$label16	{LNXT:25|26|28}
(-) BOOL
059B0504  84 C0                         test al, al
059B0506  90 74 13 90 90 90             je 059B051CH

#164		
#165				(* THEN *)
#166		
#167					(* OnByCalendar := TRUE; *)
#168					MOVE		TRUE,OnByCalendar	{LNXT:26|-1|-1}
(*) BOOL
059B050C  B8 01 00 00 00                mov eax, 01H
059B0511  84 C0                         test al, al
059B0513  0F 95 45 47                   setne 71[ebp]

#169					JMP		$label17	{LNXT:25|26|28}
(-) BOOL
059B0517  EB 0E 90 90 90                jmp 059B0527H

#170		$label16:
#171		
#172				(* ELSE *)
#173		
#174					(* OnByCalendar := FALSE; *)
#175					MOVE		FALSE,OnByCalendar	{LNXT:28|-1|-1}
(*) BOOL
059B051C  B8 00 00 00 00                mov eax, 00H
059B0521  84 C0                         test al, al
059B0523  0F 95 45 47                   setne 71[ebp]

#176		
#177		$label17:
#178				(* END_IF *)
#179				JMP		$label0	{LNXT:1|28|-1}
(-) BOOL
059B0527  E9 93 02 00 00                jmp 059B07BFH

#180		
#181		$label4:
#182		
#183				(* IF NOW >= P41On AND NOW < P42Off AND Gio_enabled *)
#184				LD		NOW	{LNXT:32|-1|-1}
(*) UNDEF
059B052C  0F BF 45 00                   movsx eax, word ptr [ebp]

#185				LT		P42Off	{LNXT:32|-1|-1}
(*) INT
059B0530  0F BF 4D 22                   movsx ecx, word ptr 34[ebp]
059B0534  3B C1                         cmp eax, ecx
059B0536  0F 9C C0                      setl al
059B0539  25 FF 00 00 00                and eax, 0FFh

#186				AND(		NOW	{LNXT:32|-1|-1}
(*) BOOL
059B053E  50                            push eax
059B053F  0F BF 45 00                   movsx eax, word ptr [ebp]

#187				GE		P41On	{LNXT:32|-1|-1}
(*) INT
059B0543  0F BF 4D 20                   movsx ecx, word ptr 32[ebp]
059B0547  3B C1                         cmp eax, ecx
059B0549  0F 9D C0                      setge al
059B054C  25 FF 00 00 00                and eax, 0FFh

#188				)	{LNXT:32|-1|-1}
(*) BOOL
059B0551  8B C8                         mov ecx, eax
059B0553  58                            pop eax
059B0554  23 C1                         and eax, ecx

#189				AND		Gio_enabled	{LNXT:32|-1|-1}
(*) BOOL
059B0556  33 C9                         xor ecx, ecx
059B0558  8A 4D 43                      mov cl, 67[ebp]
059B055B  23 C1                         and eax, ecx

#190				JMPCN	$label18	{LNXT:32|33|34}
(-) BOOL
059B055D  84 C0                         test al, al
059B055F  90 74 13 90 90 90             je 059B0575H

#191		
#192				(* THEN *)
#193		
#194					(* OnByCalendar := TRUE; *)
#195					MOVE		TRUE,OnByCalendar	{LNXT:33|-1|-1}
(*) BOOL
059B0565  B8 01 00 00 00                mov eax, 01H
059B056A  84 C0                         test al, al
059B056C  0F 95 45 47                   setne 71[ebp]

#196					JMP		$label20	{LNXT:32|33|34}
(-) BOOL
059B0570  EB 57 90 90 90                jmp 059B05C9H

#197		$label18:
#198		
#199				(* ELSIF NOW >= P43On AND NOW < P44Off AND Gio_enabled *)
#200				LD		NOW	{LNXT:34|-1|-1}
(*) UNDEF
059B0575  0F BF 45 00                   movsx eax, word ptr [ebp]

#201				LT		P44Off	{LNXT:34|-1|-1}
(*) INT
059B0579  0F BF 4D 26                   movsx ecx, word ptr 38[ebp]
059B057D  3B C1                         cmp eax, ecx
059B057F  0F 9C C0                      setl al
059B0582  25 FF 00 00 00                and eax, 0FFh

#202				AND(		NOW	{LNXT:34|-1|-1}
(*) BOOL
059B0587  50                            push eax
059B0588  0F BF 45 00                   movsx eax, word ptr [ebp]

#203				GE		P43On	{LNXT:34|-1|-1}
(*) INT
059B058C  0F BF 4D 24                   movsx ecx, word ptr 36[ebp]
059B0590  3B C1                         cmp eax, ecx
059B0592  0F 9D C0                      setge al
059B0595  25 FF 00 00 00                and eax, 0FFh

#204				)	{LNXT:34|-1|-1}
(*) BOOL
059B059A  8B C8                         mov ecx, eax
059B059C  58                            pop eax
059B059D  23 C1                         and eax, ecx

#205				AND		Gio_enabled	{LNXT:34|-1|-1}
(*) BOOL
059B059F  33 C9                         xor ecx, ecx
059B05A1  8A 4D 43                      mov cl, 67[ebp]
059B05A4  23 C1                         and eax, ecx

#206				JMPCN	$label19	{LNXT:34|35|37}
(-) BOOL
059B05A6  84 C0                         test al, al
059B05A8  90 74 13 90 90 90             je 059B05BEH

#207		
#208				(* THEN *)
#209		
#210					(* OnByCalendar := TRUE; *)
#211					MOVE		TRUE,OnByCalendar	{LNXT:35|-1|-1}
(*) BOOL
059B05AE  B8 01 00 00 00                mov eax, 01H
059B05B3  84 C0                         test al, al
059B05B5  0F 95 45 47                   setne 71[ebp]

#212					JMP		$label20	{LNXT:34|35|37}
(-) BOOL
059B05B9  EB 0E 90 90 90                jmp 059B05C9H

#213		$label19:
#214		
#215				(* ELSE *)
#216		
#217					(* OnByCalendar := FALSE; *)
#218					MOVE		FALSE,OnByCalendar	{LNXT:37|-1|-1}
(*) BOOL
059B05BE  B8 00 00 00 00                mov eax, 00H
059B05C3  84 C0                         test al, al
059B05C5  0F 95 45 47                   setne 71[ebp]

#219		
#220		$label20:
#221				(* END_IF *)
#222				JMP		$label0	{LNXT:1|37|-1}
(-) BOOL
059B05C9  E9 F1 01 00 00                jmp 059B07BFH

#223		
#224		$label5:
#225		
#226				(* IF NOW >= P51On AND NOW < P52Off AND Ven_enabled *)
#227				LD		NOW	{LNXT:41|-1|-1}
(*) UNDEF
059B05CE  0F BF 45 00                   movsx eax, word ptr [ebp]

#228				LT		P52Off	{LNXT:41|-1|-1}
(*) INT
059B05D2  0F BF 4D 2A                   movsx ecx, word ptr 42[ebp]
059B05D6  3B C1                         cmp eax, ecx
059B05D8  0F 9C C0                      setl al
059B05DB  25 FF 00 00 00                and eax, 0FFh

#229				AND(		NOW	{LNXT:41|-1|-1}
(*) BOOL
059B05E0  50                            push eax
059B05E1  0F BF 45 00                   movsx eax, word ptr [ebp]

#230				GE		P51On	{LNXT:41|-1|-1}
(*) INT
059B05E5  0F BF 4D 28                   movsx ecx, word ptr 40[ebp]
059B05E9  3B C1                         cmp eax, ecx
059B05EB  0F 9D C0                      setge al
059B05EE  25 FF 00 00 00                and eax, 0FFh

#231				)	{LNXT:41|-1|-1}
(*) BOOL
059B05F3  8B C8                         mov ecx, eax
059B05F5  58                            pop eax
059B05F6  23 C1                         and eax, ecx

#232				AND		Ven_enabled	{LNXT:41|-1|-1}
(*) BOOL
059B05F8  33 C9                         xor ecx, ecx
059B05FA  8A 4D 44                      mov cl, 68[ebp]
059B05FD  23 C1                         and eax, ecx

#233				JMPCN	$label21	{LNXT:41|42|43}
(-) BOOL
059B05FF  84 C0                         test al, al
059B0601  90 74 13 90 90 90             je 059B0617H

#234		
#235				(* THEN *)
#236		
#237					(* OnByCalendar := TRUE; *)
#238					MOVE		TRUE,OnByCalendar	{LNXT:42|-1|-1}
(*) BOOL
059B0607  B8 01 00 00 00                mov eax, 01H
059B060C  84 C0                         test al, al
059B060E  0F 95 45 47                   setne 71[ebp]

#239					JMP		$label23	{LNXT:41|42|43}
(-) BOOL
059B0612  EB 57 90 90 90                jmp 059B066BH

#240		$label21:
#241		
#242				(* ELSIF NOW >= P53On AND NOW < P54Off AND Ven_enabled *)
#243				LD		NOW	{LNXT:43|-1|-1}
(*) UNDEF
059B0617  0F BF 45 00                   movsx eax, word ptr [ebp]

#244				LT		P54Off	{LNXT:43|-1|-1}
(*) INT
059B061B  0F BF 4D 2E                   movsx ecx, word ptr 46[ebp]
059B061F  3B C1                         cmp eax, ecx
059B0621  0F 9C C0                      setl al
059B0624  25 FF 00 00 00                and eax, 0FFh

#245				AND(		NOW	{LNXT:43|-1|-1}
(*) BOOL
059B0629  50                            push eax
059B062A  0F BF 45 00                   movsx eax, word ptr [ebp]

#246				GE		P53On	{LNXT:43|-1|-1}
(*) INT
059B062E  0F BF 4D 2C                   movsx ecx, word ptr 44[ebp]
059B0632  3B C1                         cmp eax, ecx
059B0634  0F 9D C0                      setge al
059B0637  25 FF 00 00 00                and eax, 0FFh

#247				)	{LNXT:43|-1|-1}
(*) BOOL
059B063C  8B C8                         mov ecx, eax
059B063E  58                            pop eax
059B063F  23 C1                         and eax, ecx

#248				AND		Ven_enabled	{LNXT:43|-1|-1}
(*) BOOL
059B0641  33 C9                         xor ecx, ecx
059B0643  8A 4D 44                      mov cl, 68[ebp]
059B0646  23 C1                         and eax, ecx

#249				JMPCN	$label22	{LNXT:43|44|46}
(-) BOOL
059B0648  84 C0                         test al, al
059B064A  90 74 13 90 90 90             je 059B0660H

#250		
#251				(* THEN *)
#252		
#253					(* OnByCalendar := TRUE; *)
#254					MOVE		TRUE,OnByCalendar	{LNXT:44|-1|-1}
(*) BOOL
059B0650  B8 01 00 00 00                mov eax, 01H
059B0655  84 C0                         test al, al
059B0657  0F 95 45 47                   setne 71[ebp]

#255					JMP		$label23	{LNXT:43|44|46}
(-) BOOL
059B065B  EB 0E 90 90 90                jmp 059B066BH

#256		$label22:
#257		
#258				(* ELSE *)
#259		
#260					(* OnByCalendar := FALSE; *)
#261					MOVE		FALSE,OnByCalendar	{LNXT:46|-1|-1}
(*) BOOL
059B0660  B8 00 00 00 00                mov eax, 00H
059B0665  84 C0                         test al, al
059B0667  0F 95 45 47                   setne 71[ebp]

#262		
#263		$label23:
#264				(* END_IF *)
#265				JMP		$label0	{LNXT:1|46|-1}
(-) BOOL
059B066B  E9 4F 01 00 00                jmp 059B07BFH

#266		
#267		$label6:
#268		
#269				(* IF NOW >= P61On AND NOW < P62Off AND Sab_enabled *)
#270				LD		NOW	{LNXT:50|-1|-1}
(*) UNDEF
059B0670  0F BF 45 00                   movsx eax, word ptr [ebp]

#271				LT		P62Off	{LNXT:50|-1|-1}
(*) INT
059B0674  0F BF 4D 32                   movsx ecx, word ptr 50[ebp]
059B0678  3B C1                         cmp eax, ecx
059B067A  0F 9C C0                      setl al
059B067D  25 FF 00 00 00                and eax, 0FFh

#272				AND(		NOW	{LNXT:50|-1|-1}
(*) BOOL
059B0682  50                            push eax
059B0683  0F BF 45 00                   movsx eax, word ptr [ebp]

#273				GE		P61On	{LNXT:50|-1|-1}
(*) INT
059B0687  0F BF 4D 30                   movsx ecx, word ptr 48[ebp]
059B068B  3B C1                         cmp eax, ecx
059B068D  0F 9D C0                      setge al
059B0690  25 FF 00 00 00                and eax, 0FFh

#274				)	{LNXT:50|-1|-1}
(*) BOOL
059B0695  8B C8                         mov ecx, eax
059B0697  58                            pop eax
059B0698  23 C1                         and eax, ecx

#275				AND		Sab_enabled	{LNXT:50|-1|-1}
(*) BOOL
059B069A  33 C9                         xor ecx, ecx
059B069C  8A 4D 45                      mov cl, 69[ebp]
059B069F  23 C1                         and eax, ecx

#276				JMPCN	$label24	{LNXT:50|51|52}
(-) BOOL
059B06A1  84 C0                         test al, al
059B06A3  90 74 13 90 90 90             je 059B06B9H

#277		
#278				(* THEN *)
#279		
#280					(* OnByCalendar := TRUE; *)
#281					MOVE		TRUE,OnByCalendar	{LNXT:51|-1|-1}
(*) BOOL
059B06A9  B8 01 00 00 00                mov eax, 01H
059B06AE  84 C0                         test al, al
059B06B0  0F 95 45 47                   setne 71[ebp]

#282					JMP		$label26	{LNXT:50|51|52}
(-) BOOL
059B06B4  EB 57 90 90 90                jmp 059B070DH

#283		$label24:
#284		
#285				(* ELSIF NOW >= P63On AND NOW < P64Off AND Sab_enabled *)
#286				LD		NOW	{LNXT:52|-1|-1}
(*) UNDEF
059B06B9  0F BF 45 00                   movsx eax, word ptr [ebp]

#287				LT		P64Off	{LNXT:52|-1|-1}
(*) INT
059B06BD  0F BF 4D 36                   movsx ecx, word ptr 54[ebp]
059B06C1  3B C1                         cmp eax, ecx
059B06C3  0F 9C C0                      setl al
059B06C6  25 FF 00 00 00                and eax, 0FFh

#288				AND(		NOW	{LNXT:52|-1|-1}
(*) BOOL
059B06CB  50                            push eax
059B06CC  0F BF 45 00                   movsx eax, word ptr [ebp]

#289				GE		P63On	{LNXT:52|-1|-1}
(*) INT
059B06D0  0F BF 4D 34                   movsx ecx, word ptr 52[ebp]
059B06D4  3B C1                         cmp eax, ecx
059B06D6  0F 9D C0                      setge al
059B06D9  25 FF 00 00 00                and eax, 0FFh

#290				)	{LNXT:52|-1|-1}
(*) BOOL
059B06DE  8B C8                         mov ecx, eax
059B06E0  58                            pop eax
059B06E1  23 C1                         and eax, ecx

#291				AND		Sab_enabled	{LNXT:52|-1|-1}
(*) BOOL
059B06E3  33 C9                         xor ecx, ecx
059B06E5  8A 4D 45                      mov cl, 69[ebp]
059B06E8  23 C1                         and eax, ecx

#292				JMPCN	$label25	{LNXT:52|53|55}
(-) BOOL
059B06EA  84 C0                         test al, al
059B06EC  90 74 13 90 90 90             je 059B0702H

#293		
#294				(* THEN *)
#295		
#296					(* OnByCalendar := TRUE; *)
#297					MOVE		TRUE,OnByCalendar	{LNXT:53|-1|-1}
(*) BOOL
059B06F2  B8 01 00 00 00                mov eax, 01H
059B06F7  84 C0                         test al, al
059B06F9  0F 95 45 47                   setne 71[ebp]

#298					JMP		$label26	{LNXT:52|53|55}
(-) BOOL
059B06FD  EB 0E 90 90 90                jmp 059B070DH

#299		$label25:
#300		
#301				(* ELSE *)
#302		
#303					(* OnByCalendar := FALSE; *)
#304					MOVE		FALSE,OnByCalendar	{LNXT:55|-1|-1}
(*) BOOL
059B0702  B8 00 00 00 00                mov eax, 00H
059B0707  84 C0                         test al, al
059B0709  0F 95 45 47                   setne 71[ebp]

#305		
#306		$label26:
#307				(* END_IF *)
#308				JMP		$label0	{LNXT:1|55|-1}
(-) BOOL
059B070D  E9 AD 00 00 00                jmp 059B07BFH

#309		
#310		$label7:
#311		
#312				(* IF NOW >= P71On AND NOW < P72Off AND Dom_enabled *)
#313				LD		NOW	{LNXT:59|-1|-1}
(*) UNDEF
059B0712  0F BF 45 00                   movsx eax, word ptr [ebp]

#314				LT		P72Off	{LNXT:59|-1|-1}
(*) INT
059B0716  0F BF 4D 3A                   movsx ecx, word ptr 58[ebp]
059B071A  3B C1                         cmp eax, ecx
059B071C  0F 9C C0                      setl al
059B071F  25 FF 00 00 00                and eax, 0FFh

#315				AND(		NOW	{LNXT:59|-1|-1}
(*) BOOL
059B0724  50                            push eax
059B0725  0F BF 45 00                   movsx eax, word ptr [ebp]

#316				GE		P71On	{LNXT:59|-1|-1}
(*) INT
059B0729  0F BF 4D 38                   movsx ecx, word ptr 56[ebp]
059B072D  3B C1                         cmp eax, ecx
059B072F  0F 9D C0                      setge al
059B0732  25 FF 00 00 00                and eax, 0FFh

#317				)	{LNXT:59|-1|-1}
(*) BOOL
059B0737  8B C8                         mov ecx, eax
059B0739  58                            pop eax
059B073A  23 C1                         and eax, ecx

#318				AND		Dom_enabled	{LNXT:59|-1|-1}
(*) BOOL
059B073C  33 C9                         xor ecx, ecx
059B073E  8A 4D 46                      mov cl, 70[ebp]
059B0741  23 C1                         and eax, ecx

#319				JMPCN	$label27	{LNXT:59|60|61}
(-) BOOL
059B0743  84 C0                         test al, al
059B0745  90 74 13 90 90 90             je 059B075BH

#320		
#321				(* THEN *)
#322		
#323					(* OnByCalendar := TRUE; *)
#324					MOVE		TRUE,OnByCalendar	{LNXT:60|-1|-1}
(*) BOOL
059B074B  B8 01 00 00 00                mov eax, 01H
059B0750  84 C0                         test al, al
059B0752  0F 95 45 47                   setne 71[ebp]

#325					JMP		$label29	{LNXT:59|60|61}
(-) BOOL
059B0756  EB 57 90 90 90                jmp 059B07AFH

#326		$label27:
#327		
#328				(* ELSIF NOW >= P73On AND NOW < P74Off AND Dom_enabled *)
#329				LD		NOW	{LNXT:61|-1|-1}
(*) UNDEF
059B075B  0F BF 45 00                   movsx eax, word ptr [ebp]

#330				LT		P74Off	{LNXT:61|-1|-1}
(*) INT
059B075F  0F BF 4D 3E                   movsx ecx, word ptr 62[ebp]
059B0763  3B C1                         cmp eax, ecx
059B0765  0F 9C C0                      setl al
059B0768  25 FF 00 00 00                and eax, 0FFh

#331				AND(		NOW	{LNXT:61|-1|-1}
(*) BOOL
059B076D  50                            push eax
059B076E  0F BF 45 00                   movsx eax, word ptr [ebp]

#332				GE		P73On	{LNXT:61|-1|-1}
(*) INT
059B0772  0F BF 4D 3C                   movsx ecx, word ptr 60[ebp]
059B0776  3B C1                         cmp eax, ecx
059B0778  0F 9D C0                      setge al
059B077B  25 FF 00 00 00                and eax, 0FFh

#333				)	{LNXT:61|-1|-1}
(*) BOOL
059B0780  8B C8                         mov ecx, eax
059B0782  58                            pop eax
059B0783  23 C1                         and eax, ecx

#334				AND		Dom_enabled	{LNXT:61|-1|-1}
(*) BOOL
059B0785  33 C9                         xor ecx, ecx
059B0787  8A 4D 46                      mov cl, 70[ebp]
059B078A  23 C1                         and eax, ecx

#335				JMPCN	$label28	{LNXT:61|62|64}
(-) BOOL
059B078C  84 C0                         test al, al
059B078E  90 74 13 90 90 90             je 059B07A4H

#336		
#337				(* THEN *)
#338		
#339					(* OnByCalendar := TRUE; *)
#340					MOVE		TRUE,OnByCalendar	{LNXT:62|-1|-1}
(*) BOOL
059B0794  B8 01 00 00 00                mov eax, 01H
059B0799  84 C0                         test al, al
059B079B  0F 95 45 47                   setne 71[ebp]

#341					JMP		$label29	{LNXT:61|62|64}
(-) BOOL
059B079F  EB 0E 90 90 90                jmp 059B07AFH

#342		$label28:
#343		
#344				(* ELSE *)
#345		
#346					(* OnByCalendar := FALSE; *)
#347					MOVE		FALSE,OnByCalendar	{LNXT:64|-1|-1}
(*) BOOL
059B07A4  B8 00 00 00 00                mov eax, 00H
059B07A9  84 C0                         test al, al
059B07AB  0F 95 45 47                   setne 71[ebp]

#348		
#349		$label29:
#350				(* END_IF *)
#351				JMP		$label0	{LNXT:1|64|-1}
(-) BOOL
059B07AF  EB 0E 90 90 90                jmp 059B07BFH

#352		
#353		$label8:
#354				(* OnByCalendar := FALSE; *)
#355				MOVE		FALSE,OnByCalendar	{LNXT:68|-1|-1}
(*) BOOL
059B07B4  B8 00 00 00 00                mov eax, 00H
059B07B9  84 C0                         test al, al
059B07BB  0F 95 45 47                   setne 71[ebp]

059B07BF  5D                            pop ebp

059B07C0  C3                            ret


Frame allocation:

	0000       : VAR NOW
	0002       : VAR Giorno_settimana
	0004       : VAR Ora
	0006       : VAR Minuto
	0008       : VAR P11On
	000A       : VAR P12Off
	000C       : VAR P13On
	000E       : VAR P14Off
	0010       : VAR P21On
	0012       : VAR P22Off
	0014       : VAR P23On
	0016       : VAR P24Off
	0018       : VAR P31On
	001A       : VAR P32Off
	001C       : VAR P33On
	001E       : VAR P34Off
	0020       : VAR P41On
	0022       : VAR P42Off
	0024       : VAR P43On
	0026       : VAR P44Off
	0028       : VAR P51On
	002A       : VAR P52Off
	002C       : VAR P53On
	002E       : VAR P54Off
	0030       : VAR P61On
	0032       : VAR P62Off
	0034       : VAR P63On
	0036       : VAR P64Off
	0038       : VAR P71On
	003A       : VAR P72Off
	003C       : VAR P73On
	003E       : VAR P74Off
	0040 bit  0: VAR Lun_enabled
	0041 bit  0: VAR Mar_enabled
	0042 bit  0: VAR Mer_enabled
	0043 bit  0: VAR Gio_enabled
	0044 bit  0: VAR Ven_enabled
	0045 bit  0: VAR Sab_enabled
	0046 bit  0: VAR Dom_enabled
	0047 bit  0: VAR OnByCalendar

END_FUNCTION_BLOCK
**************************************************
	List function: XUnifiedLibInit
**************************************************

FUNCTION XUnifiedLibInit : BOOL

	{ DE:"XUnified library init" }

        VAR_INPUT
Cmd : BOOL;	{ DE:"Command" }
	END_VAR

        VAR
b : BOOL;	{ DE:"Dummy" }
ver : STRING[ 10 ];	{ DE:"Lib version" }
ptr : @BYTE;
	END_VAR

END_FUNCTION

	*** Function data allocation

	Res XUnifiedLibInit: LOCAL STACK FRAME AT -4(ebp)
	Par Cmd: CALLER STACK FRAME AT 8(ebp)
	Var b: LOCAL STACK FRAME AT -8(ebp)
	Var ver: LOCAL STACK FRAME AT -20(ebp)
	Var ptr: LOCAL STACK FRAME AT -24(ebp)

059B07C1  55                            push ebp
059B07C2  8B EC                         mov ebp, esp
059B07C4  81 EC 1C 00 00 00             sub esp, 28

#0		{SRC:XUnifiedLibInit}
#1		(*$WAITSWITCH$*)
#2		
#3			(* ver:='SFR094A020'; *)
#4			MOVE		'SFR094A020',ver	{LNXT:2|3|-1}
(*) BOOL
059B07CA  B8 CC CC CC CC                mov eax, CCCCCCCCH ; $$CODE$$+244
059B07CF  50                            push eax
059B07D0  68 0B 00 00 00                push 11
059B07D5  8B D5                         mov edx, ebp
059B07D7  81 C2 EC FF FF FF             add edx, -20
059B07DD  52                            push edx
059B07DE  50                            push eax
059B07DF  B9 CC CC CC CC                mov ecx, CCCCCCCCH ; ST_STRING_SAFE
059B07E4  FF D1                         call ecx
059B07E6  81 C4 0C 00 00 00             add esp, 12
059B07EC  58                            pop eax

#5		
#6			(* ptr:=ADR(ver); *)
#7			ADR		ver	{LNXT:3|4|-1}
(*) STRING
059B07ED  8D 45 EC                      lea eax, -20[ebp]

#8			ST		ptr	{LNXT:3|4|-1}
(*) @STRING
059B07F0  89 45 E8                      mov -24[ebp], eax

#9		
#10			(* b:=SysXUnifiedValue(TRUE, 1, ptr); *)
#11			LD		TRUE	{LNXT:4|5|-1}
(*) UNDEF
059B07F3  B8 01 00 00 00                mov eax, 01H

#12			SysXUnifiedValue		1, ptr	{LNXT:4|5|-1}
(*) BOOL
059B07F8  FF 75 E8                      push -24[ebp]
059B07FB  68 01 00 00 00                push 1
059B0800  50                            push eax
059B0801  B9 CC CC CC CC                mov ecx, CCCCCCCCH ; SysXUnifiedValue
059B0806  FF D1                         call ecx
059B0808  81 C4 0C 00 00 00             add esp, 12

#13			ST		b	{LNXT:4|5|-1}
(*) BOOL
059B080E  84 C0                         test al, al
059B0810  0F 95 45 F8                   setne -8[ebp]

#14		
#15			(* XUnifiedLibInit:=TRUE; *)
#16			MOVE		TRUE,XUnifiedLibInit	{LNXT:5|-1|-1}
(*) BOOL
059B0814  B8 01 00 00 00                mov eax, 01H
059B0819  84 C0                         test al, al
059B081B  0F 95 45 FC                   setne -4[ebp]

059B081F  33 C0                         xor eax, eax
059B0821  8A 45 FC                      mov al, -4[ebp]
059B0824  8B E5                         mov esp, ebp
059B0826  5D                            pop ebp

059B0827  C3                            ret

END_FUNCTION
**************************************************
	List program: $$ElsistInit
**************************************************

PROGRAM $$ElsistInit

        VAR
dummy : BOOL;
	END_VAR

END_PROGRAM

059B0830  55                            push ebp
059B0831  8B EC                         mov ebp, esp
059B0833  60                            pushad

#0		{SRC:$$ElsistInit}
#1		(*$WAITSWITCH$*)
#2		
#3			(* dummy:=XUnifiedLibInit(TRUE); *)
#4			LD		TRUE	{LNXT:2|2|-1}
(*) UNDEF
059B0834  B8 01 00 00 00                mov eax, 01H

#5			XUnifiedLibInit	{LNXT:2|2|-1}
(*) BOOL
059B0839  50                            push eax
059B083A  E8 82 FF FF FF                call 059B07C1H ; $$CODE$$+1985
059B083F  81 C4 04 00 00 00             add esp, 4

#6			ST		dummy	{LNXT:2|2|-1}
(*) BOOL
059B0845  84 C0                         test al, al
059B0847  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+12

059B084E  61                            popad
059B084F  5D                            pop ebp

059B0850  C3                            ret

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
059B0851  C3                            ret


*** OUTPUT:
059B0852  C3                            ret



**************************************************
	Task Boot init code
**************************************************

059B0853  55                            push ebp
059B0854  8B EC                         mov ebp, esp

059B0856  8B E5                         mov esp, ebp
059B0858  5D                            pop ebp

059B0859  C3                            ret

**************************************************
	List program: Analog_Value
**************************************************

PROGRAM Analog_Value

        VAR
AI1 : SysGetAnInp;	{ DE:"Analog input acquisition" }
AI2 : SysGetAnInp;	{ DE:"Analog input acquisition" }
	END_VAR

END_PROGRAM

059B0870  55                            push ebp
059B0871  8B EC                         mov ebp, esp
059B0873  60                            pushad

#0		{SRC:Analog_Value}
#1		(*$WAITSWITCH$*)
#2		
#3			(* AI1.Address:=255; *)
#4			MOVE		255,AI1.Address	{LNXT:13|14|-1}
(*) UDINT
059B0874  B8 FF 00 00 00                mov eax, FFH
059B0879  88 05 CC CC CC CC             mov [CCCCCCCCH], al ; $$DATA$$+18

#5		
#6			(* AI1.Channel:=0; *)
#7			MOVE		0,AI1.Channel	{LNXT:14|15|-1}
(*) USINT
059B087F  B8 00 00 00 00                mov eax, 00H
059B0884  88 05 CC CC CC CC             mov [CCCCCCCCH], al ; $$DATA$$+19

#8		
#9			(* AI1.Mode:=AD_PT100_DIFFER; *)
#10			MOVE		AD_PT100_DIFFER,AI1.Mode	{LNXT:15|16|-1}
(*) USINT
059B088A  B8 0A 00 00 00                mov eax, 10
059B088F  89 05 CC CC CC CC             mov [CCCCCCCCH], eax ; $$DATA$$+20

#11		
#12			(* AI1 *)
#13			CAL		AI1	{LNXT:16|17|-1}
(*) DINT
059B0895  50                            push eax
059B0896  68 CC CC CC CC                push CCCCCCCCH ; $$DATA$$+13
059B089B  B9 CC CC CC CC                mov ecx, CCCCCCCCH ; SysGetAnInp
059B08A0  FF D1                         call ecx
059B08A2  81 C4 04 00 00 00             add esp, 4
059B08A8  58                            pop eax

#14		
#15		
#16			(* IF AI1.Done *)
#17			LD		AI1.Done	{LNXT:17|-1|-1}
(*) UNDEF
059B08A9  33 C0                         xor eax, eax
059B08AB  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+24

#18			JMPCN	$label0	{LNXT:17|17|19}
(-) BOOL
059B08B1  84 C0                         test al, al
059B08B3  90 74 0F 90 90 90             je 059B08C5H

#19		
#20			(* THEN *)
#21		
#22				(* Temp_accumulo:=AI1.Value; *)
#23				MOVE		AI1.Value,Temp_accumulo	{LNXT:17|19|-1}
(*) BOOL
059B08B9  D9 05 CC CC CC CC             fld  [CCCCCCCCH] ; $$DATA$$+26
059B08BF  D9 15 CC CC CC CC             fst [CCCCCCCCH] ; $$DATA$$+32

#24		
#25		$label0:
#26			(* END_IF *)
#27		
#28			(* AI2.Address:=255; *)
#29			MOVE		255,AI2.Address	{LNXT:19|20|-1}
(*) REAL
059B08C5  DD C0                         ffree
059B08C7  D9 F7                         fincstp
059B08C9  B8 FF 00 00 00                mov eax, FFH
059B08CE  88 05 CC CC CC CC             mov [CCCCCCCCH], al ; $$DATA$$+41

#30		
#31			(* AI2.Channel:=1; *)
#32			MOVE		1,AI2.Channel	{LNXT:20|21|-1}
(*) USINT
059B08D4  B8 01 00 00 00                mov eax, 01H
059B08D9  88 05 CC CC CC CC             mov [CCCCCCCCH], al ; $$DATA$$+42

#33		
#34			(* AI2.Mode:= AD_PT100_DIFFER; *)
#35			MOVE		AD_PT100_DIFFER,AI2.Mode	{LNXT:21|22|-1}
(*) USINT
059B08DF  B8 0A 00 00 00                mov eax, 10
059B08E4  89 05 CC CC CC CC             mov [CCCCCCCCH], eax ; $$DATA$$+43

#36		
#37			(* AI2 *)
#38			CAL		AI2	{LNXT:22|23|-1}
(*) DINT
059B08EA  50                            push eax
059B08EB  68 CC CC CC CC                push CCCCCCCCH ; $$DATA$$+36
059B08F0  B9 CC CC CC CC                mov ecx, CCCCCCCCH ; SysGetAnInp
059B08F5  FF D1                         call ecx
059B08F7  81 C4 04 00 00 00             add esp, 4
059B08FD  58                            pop eax

#39		
#40		
#41			(* IF AI2.Done *)
#42			LD		AI2.Done	{LNXT:23|-1|-1}
(*) UNDEF
059B08FE  33 C0                         xor eax, eax
059B0900  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+47

#43			JMPCN	$label1	{LNXT:23|23|13}
(-) BOOL
059B0906  84 C0                         test al, al
059B0908  90 74 13 90 90 90             je 059B091EH

#44		
#45			(* THEN *)
#46		
#47				(* Sonda_esterna:=AI2.Value; *)
#48				MOVE		AI2.Value,Sonda_esterna	{LNXT:23|13|-1}
(*) BOOL
059B090E  D9 05 CC CC CC CC             fld  [CCCCCCCCH] ; $$DATA$$+49
059B0914  D9 15 CC CC CC CC             fst [CCCCCCCCH] ; $$DATA$$+56
059B091A  DD C0                         ffree
059B091C  D9 F7                         fincstp

END_PROGRAM
**************************************************
	List program: Controllo_HVAC_inverno
**************************************************

PROGRAM Controllo_HVAC_inverno

        VAR
Fase : INT := 0;
Delay : eTON;
Delay1 : eTON;
Delay2 : eTON;
Delay3 : eTON;
	END_VAR

END_PROGRAM

#0		{SRC:Controllo_HVAC_inverno}
#1		(*$WAITSWITCH$*)
#2		
#3		
#4			(* IF Estate_Inverno AND (CalendarOnOff OR Automatico_Manuale *)
#5			LD		CalendarOnOff	{LNXT:1|-1|-1}
(*) UNDEF
059B091E  33 C0                         xor eax, eax
059B0920  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+53

#6			OR		Automatico_Manuale	{LNXT:1|-1|-1}
(*) BOOL
059B0926  33 C9                         xor ecx, ecx
059B0928  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; %M100+1
059B092E  0B C1                         or eax, ecx

#7			AND		Estate_Inverno	{LNXT:1|-1|-1}
(*) BOOL
059B0930  33 C9                         xor ecx, ecx
059B0932  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; %M100+0
059B0938  23 C1                         and eax, ecx

#8			JMPCN	$label0	{LNXT:1|3|152}
(-) BOOL
059B093A  84 C0                         test al, al
059B093C  0F 84 90 0A 00 00             je 059B13D2H

#9		
#10			(* THEN *)
#11		
#12				(* Delay.PT := 20000; *)
#13				MOVE		20000,Delay.PT	{LNXT:3|4|-1}
(*) BOOL
059B0942  B8 20 4E 00 00                mov eax, 4E20H
059B0947  89 05 CC CC CC CC             mov [CCCCCCCCH], eax ; $$DATA$$+65

#14		
#15				(* Delay *)
#16				CAL		Delay	{LNXT:4|8|-1}
(*) UDINT
059B094D  50                            push eax
059B094E  BB CC CC CC CC                mov ebx, CCCCCCCCH ; $$DATA$$+60
059B0953  E8 F6 F7 FF FF                call 059B014EH ; $$CODE$$+334
059B0958  58                            pop eax

#17		
#18		
#19				(* CASE Fase OF *)
#20		
#21				(* 0: *)
#22				LD		Fase	{LNXT:10|-1|-1}
(*) UNDEF
059B0959  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+30

#23				EQ		0	{LNXT:10|-1|-1}
(*) INT
059B0960  3D 00 00 00 00                cmp eax, 0
059B0965  0F 94 C0                      sete al
059B0968  25 FF 00 00 00                and eax, 0FFh

#24				JMPC		$label3	{LNXT:10|10|28}
(-) BOOL
059B096D  84 C0                         test al, al
059B096F  0F 85 C9 00 00 00             jne 059B0A3EH

#25		
#26				(* 1: *)
#27				LD		Fase	{LNXT:28|-1|-1}
(*) UNDEF
059B0975  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+30

#28				EQ		1	{LNXT:28|-1|-1}
(*) INT
059B097C  3D 01 00 00 00                cmp eax, 1
059B0981  0F 94 C0                      sete al
059B0984  25 FF 00 00 00                and eax, 0FFh

#29				JMPC		$label4	{LNXT:28|29|49}
(-) BOOL
059B0989  84 C0                         test al, al
059B098B  0F 85 79 01 00 00             jne 059B0B0AH

#30		
#31				(* 2: *)
#32				LD		Fase	{LNXT:49|-1|-1}
(*) UNDEF
059B0991  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+30

#33				EQ		2	{LNXT:49|-1|-1}
(*) INT
059B0998  3D 02 00 00 00                cmp eax, 2
059B099D  0F 94 C0                      sete al
059B09A0  25 FF 00 00 00                and eax, 0FFh

#34				JMPC		$label5	{LNXT:49|50|70}
(-) BOOL
059B09A5  84 C0                         test al, al
059B09A7  0F 85 F0 02 00 00             jne 059B0C9DH

#35		
#36				(* 3: *)
#37				LD		Fase	{LNXT:70|-1|-1}
(*) UNDEF
059B09AD  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+30

#38				EQ		3	{LNXT:70|-1|-1}
(*) INT
059B09B4  3D 03 00 00 00                cmp eax, 3
059B09B9  0F 94 C0                      sete al
059B09BC  25 FF 00 00 00                and eax, 0FFh

#39				JMPC		$label6	{LNXT:70|71|89}
(-) BOOL
059B09C1  84 C0                         test al, al
059B09C3  0F 85 75 04 00 00             jne 059B0E3EH

#40		
#41				(* 4: *)
#42				LD		Fase	{LNXT:89|-1|-1}
(*) UNDEF
059B09C9  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+30

#43				EQ		4	{LNXT:89|-1|-1}
(*) INT
059B09D0  3D 04 00 00 00                cmp eax, 4
059B09D5  0F 94 C0                      sete al
059B09D8  25 FF 00 00 00                and eax, 0FFh

#44				JMPC		$label7	{LNXT:89|89|108}
(-) BOOL
059B09DD  84 C0                         test al, al
059B09DF  0F 85 5A 05 00 00             jne 059B0F3FH

#45		
#46				(* 5: *)
#47				LD		Fase	{LNXT:108|-1|-1}
(*) UNDEF
059B09E5  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+30

#48				EQ		5	{LNXT:108|-1|-1}
(*) INT
059B09EC  3D 05 00 00 00                cmp eax, 5
059B09F1  0F 94 C0                      sete al
059B09F4  25 FF 00 00 00                and eax, 0FFh

#49				JMPC		$label8	{LNXT:108|109|128}
(-) BOOL
059B09F9  84 C0                         test al, al
059B09FB  0F 85 56 06 00 00             jne 059B1057H

#50		
#51				(* 6: *)
#52				LD		Fase	{LNXT:128|-1|-1}
(*) UNDEF
059B0A01  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+30

#53				EQ		6	{LNXT:128|-1|-1}
(*) INT
059B0A08  3D 06 00 00 00                cmp eax, 6
059B0A0D  0F 94 C0                      sete al
059B0A10  25 FF 00 00 00                and eax, 0FFh

#54				JMPC		$label9	{LNXT:128|129|139}
(-) BOOL
059B0A15  84 C0                         test al, al
059B0A17  0F 85 B5 07 00 00             jne 059B11D2H

#55		
#56				(* 7: *)
#57				LD		Fase	{LNXT:139|-1|-1}
(*) UNDEF
059B0A1D  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+30

#58				EQ		7	{LNXT:139|-1|-1}
(*) INT
059B0A24  3D 07 00 00 00                cmp eax, 7
059B0A29  0F 94 C0                      sete al
059B0A2C  25 FF 00 00 00                and eax, 0FFh

#59				JMPC		$label10	{LNXT:139|140|1}
(-) BOOL
059B0A31  84 C0                         test al, al
059B0A33  0F 85 99 08 00 00             jne 059B12D2H

#60				JMP		$label2	{LNXT:139|140|1}
(-) BOOL
059B0A39  E9 8F 09 00 00                jmp 059B13CDH

#61		
#62				(* Istruzioni di ciascun CASE: *)
#63		
#64		$label3:
#65		
#66					(* IF Blocco_caldaia AND Blocco_PdC *)
#67					LD		Blocco_caldaia	{LNXT:10|-1|-1}
(*) UNDEF
059B0A3E  33 C0                         xor eax, eax
059B0A40  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %I255+1

#68					AND		Blocco_PdC	{LNXT:10|-1|-1}
(*) BOOL
059B0A46  33 C9                         xor ecx, ecx
059B0A48  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; %I255+3
059B0A4E  23 C1                         and eax, ecx

#69					JMPCN	$label11	{LNXT:10|12|19}
(-) BOOL
059B0A50  84 C0                         test al, al
059B0A52  90 74 4C 90 90 90             je 059B0AA1H

#70		
#71					(* THEN *)
#72		
#73						(* Comando_caldaia := FALSE; *)
#74						MOVE		FALSE,Comando_caldaia	{LNXT:12|13|-1}
(*) BOOL
059B0A58  B8 00 00 00 00                mov eax, 00H
059B0A5D  84 C0                         test al, al
059B0A5F  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q255+0

#75		
#76						(* Comando_pompa_fancoil := FALSE; *)
#77						MOVE		FALSE,Comando_pompa_fancoil	{LNXT:13|14|-1}
(*) BOOL
059B0A66  B8 00 00 00 00                mov eax, 00H
059B0A6B  84 C0                         test al, al
059B0A6D  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q255+3

#78		
#79						(* Comando_PdC := FALSE; *)
#80						MOVE		FALSE,Comando_PdC	{LNXT:14|15|-1}
(*) BOOL
059B0A74  B8 00 00 00 00                mov eax, 00H
059B0A79  84 C0                         test al, al
059B0A7B  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q255+1

#81		
#82						(* Comando_pompa_UTA := FALSE; *)
#83						MOVE		FALSE,Comando_pompa_UTA	{LNXT:15|17|-1}
(*) BOOL
059B0A82  B8 00 00 00 00                mov eax, 00H
059B0A87  84 C0                         test al, al
059B0A89  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q255+2

#84		
#85						(* Fase := 0; *)
#86						MOVE		0,Fase	{LNXT:17|1|-1}
(*) BOOL
059B0A90  B8 00 00 00 00                mov eax, 00H
059B0A95  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+30

#87						JMP		$label13	{LNXT:10|12|19}
(-) INT
059B0A9C  EB 67 90 90 90                jmp 059B0B05H

#88		$label11:
#89		
#90					(* ELSIF Blocco_caldaia AND NOT Blocco_PdC *)
#91					LD		Blocco_PdC	{LNXT:19|-1|-1}
(*) UNDEF
059B0AA1  33 C0                         xor eax, eax
059B0AA3  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %I255+3

#92					NOT	{LNXT:19|-1|-1}
(*) BOOL
059B0AA9  84 C0                         test al, al
059B0AAB  0F 94 C0                      sete al

#93					AND		Blocco_caldaia	{LNXT:19|-1|-1}
(*) BOOL
059B0AAE  33 C9                         xor ecx, ecx
059B0AB0  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; %I255+1
059B0AB6  23 C1                         and eax, ecx

#94					JMPCN	$label12	{LNXT:19|21|23}
(-) BOOL
059B0AB8  84 C0                         test al, al
059B0ABA  90 74 14 90 90 90             je 059B0AD1H

#95		
#96					(* THEN *)
#97		
#98						(* Fase := 1; *)
#99						MOVE		1,Fase	{LNXT:21|1|-1}
(*) BOOL
059B0AC0  B8 01 00 00 00                mov eax, 01H
059B0AC5  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+30

#100						JMP		$label13	{LNXT:19|21|23}
(-) INT
059B0ACC  EB 37 90 90 90                jmp 059B0B05H

#101		$label12:
#102		
#103					(* ELSIF Blocco_caldaia AND NOT Blocco_PdC *)
#104					LD		Blocco_PdC	{LNXT:23|-1|-1}
(*) UNDEF
059B0AD1  33 C0                         xor eax, eax
059B0AD3  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %I255+3

#105					NOT	{LNXT:23|-1|-1}
(*) BOOL
059B0AD9  84 C0                         test al, al
059B0ADB  0F 94 C0                      sete al

#106					AND(		Blocco_caldaia	{LNXT:23|-1|-1}
(*) BOOL
059B0ADE  50                            push eax
059B0ADF  33 C0                         xor eax, eax
059B0AE1  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %I255+1

#107					NOT	{LNXT:23|-1|-1}
(*) BOOL
059B0AE7  84 C0                         test al, al
059B0AE9  0F 94 C0                      sete al

#108					)	{LNXT:23|-1|-1}
(*) BOOL
059B0AEC  8B C8                         mov ecx, eax
059B0AEE  58                            pop eax
059B0AEF  23 C1                         and eax, ecx

#109					JMPCN	$label13	{LNXT:23|25|1}
(-) BOOL
059B0AF1  84 C0                         test al, al
059B0AF3  90 74 0F 90 90 90             je 059B0B05H

#110		
#111					(* THEN *)
#112		
#113						(* Fase := 2; *)
#114						MOVE		2,Fase	{LNXT:25|1|-1}
(*) BOOL
059B0AF9  B8 02 00 00 00                mov eax, 02H
059B0AFE  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+30

#115		
#116		$label13:
#117					(* END_IF *)
#118					JMP		$label2	{LNXT:1|1|-1}
(-) INT
059B0B05  E9 C3 08 00 00                jmp 059B13CDH

#119		
#120		$label4:
#121					(* Comando_caldaia := FALSE; *)
#122					MOVE		FALSE,Comando_caldaia	{LNXT:29|30|-1}
(*) INT
059B0B0A  B8 00 00 00 00                mov eax, 00H
059B0B0F  84 C0                         test al, al
059B0B11  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q255+0

#123		
#124					(* Comando_pompa_fancoil := FALSE; *)
#125					MOVE		FALSE,Comando_pompa_fancoil	{LNXT:30|31|-1}
(*) BOOL
059B0B18  B8 00 00 00 00                mov eax, 00H
059B0B1D  84 C0                         test al, al
059B0B1F  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q255+3

#126		
#127					(* Comando_PdC := TRUE; *)
#128					MOVE		TRUE,Comando_PdC	{LNXT:31|32|-1}
(*) BOOL
059B0B26  B8 01 00 00 00                mov eax, 01H
059B0B2B  84 C0                         test al, al
059B0B2D  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q255+1

#129		
#130					(* Comando_pompa_UTA := FALSE; *)
#131					MOVE		FALSE,Comando_pompa_UTA	{LNXT:32|34|-1}
(*) BOOL
059B0B34  B8 00 00 00 00                mov eax, 00H
059B0B39  84 C0                         test al, al
059B0B3B  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q255+2

#132		
#133		
#134					(* IF Temp_accumulo < Temp_setpoint_inverno - T_tolleranza_inverno *)
#135					LD		Temp_accumulo	{LNXT:34|-1|-1}
(*) UNDEF
059B0B42  D9 05 CC CC CC CC             fld  [CCCCCCCCH] ; $$DATA$$+32

#136					LT(		Temp_setpoint_inverno	{LNXT:34|-1|-1}
(*) REAL
059B0B48  81 EC 04 00 00 00             sub esp, 4
059B0B4E  D9 1C 24                      fstp [esp]
059B0B51  D9 05 CC CC CC CC             fld  [CCCCCCCCH] ; %M100+208

#137					SUB		T_tolleranza_inverno	{LNXT:34|-1|-1}
(*) REAL
059B0B57  D8 25 CC CC CC CC             fsub [CCCCCCCCH] ; %M100+204

#138					)	{LNXT:34|-1|-1}
(*) REAL
059B0B5D  81 EC 04 00 00 00             sub esp, 4
059B0B63  D9 1C 24                      fstp [esp]
059B0B66  D9 44 24 04                   fld 4[esp]
059B0B6A  D8 1C 24                      fcomp  [esp]
059B0B6D  DF E0                         fnstsw ax
059B0B6F  F6 C4 01                      test ah, 1h
059B0B72  0F 95 C0                      setne al 
059B0B75  25 FF 00 00 00                and eax, 0FFh
059B0B7A  81 C4 08 00 00 00             add esp, 8

#139					JMPCN	$label14	{LNXT:34|35|43}
(-) BOOL
059B0B80  84 C0                         test al, al
059B0B82  0F 84 AC 00 00 00             je 059B0C34H

#140		
#141					(* THEN *)
#142		
#143						(* Delay.IN:=TRUE; *)
#144						MOVE		TRUE,Delay.IN	{LNXT:35|36|-1}
(*) BOOL
059B0B88  DD C0                         ffree
059B0B8A  D9 F7                         fincstp
059B0B8C  B8 01 00 00 00                mov eax, 01H
059B0B91  84 C0                         test al, al
059B0B93  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+64

#145		
#146		
#147						(* IF Delay.Q AND Temp_accumulo > Temp_setpoint_inverno - T_tolleranza_inverno *)
#148						LD		Temp_accumulo	{LNXT:36|-1|-1}
(*) UNDEF
059B0B9A  D9 05 CC CC CC CC             fld  [CCCCCCCCH] ; $$DATA$$+32

#149						GT(		Temp_setpoint_inverno	{LNXT:36|-1|-1}
(*) REAL
059B0BA0  81 EC 04 00 00 00             sub esp, 4
059B0BA6  D9 1C 24                      fstp [esp]
059B0BA9  D9 05 CC CC CC CC             fld  [CCCCCCCCH] ; %M100+208

#150						SUB		T_tolleranza_inverno	{LNXT:36|-1|-1}
(*) REAL
059B0BAF  D8 25 CC CC CC CC             fsub [CCCCCCCCH] ; %M100+204

#151						)	{LNXT:36|-1|-1}
(*) REAL
059B0BB5  81 EC 04 00 00 00             sub esp, 4
059B0BBB  D9 1C 24                      fstp [esp]
059B0BBE  D9 44 24 04                   fld 4[esp]
059B0BC2  D8 1C 24                      fcomp  [esp]
059B0BC5  DF E0                         fnstsw ax
059B0BC7  F6 C4 41                      test ah, 41h
059B0BCA  0F 94 C0                      sete al 
059B0BCD  25 FF 00 00 00                and eax, 0FFh
059B0BD2  81 C4 08 00 00 00             add esp, 8

#152						AND		Delay.Q	{LNXT:36|-1|-1}
(*) BOOL
059B0BD8  33 C9                         xor ecx, ecx
059B0BDA  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+69
059B0BE0  23 C1                         and eax, ecx

#153						JMPCN	$label16	{LNXT:36|37|40}
(-) BOOL
059B0BE2  84 C0                         test al, al
059B0BE4  90 74 26 90 90 90             je 059B0C0DH

#154		
#155						(* THEN *)
#156		
#157							(* Delay.IN:=FALSE; *)
#158							MOVE		FALSE,Delay.IN	{LNXT:37|38|-1}
(*) BOOL
059B0BEA  DD C0                         ffree
059B0BEC  D9 F7                         fincstp
059B0BEE  B8 00 00 00 00                mov eax, 00H
059B0BF3  84 C0                         test al, al
059B0BF5  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+64

#159		
#160							(* Fase := 4; *)
#161							MOVE		4,Fase	{LNXT:38|1|-1}
(*) BOOL
059B0BFC  B8 04 00 00 00                mov eax, 04H
059B0C01  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+30

#162							JMP		$label17	{LNXT:36|37|40}
(-) INT
059B0C08  EB 25 90 90 90                jmp 059B0C2FH

#163		$label16:
#164		
#165						(* ELSE *)
#166		
#167							(* Delay.IN:=NOT Delay.Q; *)
#168							LD		Delay.Q	{LNXT:40|41|-1}
(*) UNDEF
059B0C0D  33 C0                         xor eax, eax
059B0C0F  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+69

#169							NOT	{LNXT:40|41|-1}
(*) BOOL
059B0C15  84 C0                         test al, al
059B0C17  0F 94 C0                      sete al

#170							ST		Delay.IN	{LNXT:40|41|-1}
(*) BOOL
059B0C1A  84 C0                         test al, al
059B0C1C  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+64

#171		
#172							(* Fase := 1; *)
#173							MOVE		1,Fase	{LNXT:41|1|-1}
(*) BOOL
059B0C23  B8 01 00 00 00                mov eax, 01H
059B0C28  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+30

#174		
#175		$label17:
#176						(* END_IF *)
#177						JMP		$label15	{LNXT:34|35|43}
(-) INT
059B0C2F  EB 67 90 90 90                jmp 059B0C98H

#178		$label14:
#179		
#180					(* ELSIF Temp_accumulo > Temp_setpoint_inverno - T_tolleranza_inverno *)
#181					LD		Temp_accumulo	{LNXT:43|-1|-1}
(*) UNDEF
059B0C34  D9 05 CC CC CC CC             fld  [CCCCCCCCH] ; $$DATA$$+32

#182					GT(		Temp_setpoint_inverno	{LNXT:43|-1|-1}
(*) REAL
059B0C3A  81 EC 04 00 00 00             sub esp, 4
059B0C40  D9 1C 24                      fstp [esp]
059B0C43  D9 05 CC CC CC CC             fld  [CCCCCCCCH] ; %M100+208

#183					SUB		T_tolleranza_inverno	{LNXT:43|-1|-1}
(*) REAL
059B0C49  D8 25 CC CC CC CC             fsub [CCCCCCCCH] ; %M100+204

#184					)	{LNXT:43|-1|-1}
(*) REAL
059B0C4F  81 EC 04 00 00 00             sub esp, 4
059B0C55  D9 1C 24                      fstp [esp]
059B0C58  D9 44 24 04                   fld 4[esp]
059B0C5C  D8 1C 24                      fcomp  [esp]
059B0C5F  DF E0                         fnstsw ax
059B0C61  F6 C4 41                      test ah, 41h
059B0C64  0F 94 C0                      sete al 
059B0C67  25 FF 00 00 00                and eax, 0FFh
059B0C6C  81 C4 08 00 00 00             add esp, 8

#185					JMPCN	$label15	{LNXT:43|44|1}
(-) BOOL
059B0C72  84 C0                         test al, al
059B0C74  90 74 21 90 90 90             je 059B0C98H

#186		
#187					(* THEN *)
#188		
#189						(* Delay.IN:=FALSE; *)
#190						MOVE		FALSE,Delay.IN	{LNXT:44|45|-1}
(*) BOOL
059B0C7A  DD C0                         ffree
059B0C7C  D9 F7                         fincstp
059B0C7E  B8 00 00 00 00                mov eax, 00H
059B0C83  84 C0                         test al, al
059B0C85  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+64

#191		
#192						(* Fase := 4; *)
#193						MOVE		4,Fase	{LNXT:45|1|-1}
(*) BOOL
059B0C8C  B8 04 00 00 00                mov eax, 04H
059B0C91  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+30

#194		
#195		$label15:
#196					(* END_IF *)
#197					JMP		$label2	{LNXT:29|1|-1}
(-) INT
059B0C98  E9 30 07 00 00                jmp 059B13CDH

#198		
#199		$label5:
#200					(* Comando_caldaia := TRUE; *)
#201					MOVE		TRUE,Comando_caldaia	{LNXT:50|51|-1}
(*) INT
059B0C9D  B8 01 00 00 00                mov eax, 01H
059B0CA2  84 C0                         test al, al
059B0CA4  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q255+0

#202		
#203					(* Comando_pompa_fancoil := FALSE; *)
#204					MOVE		FALSE,Comando_pompa_fancoil	{LNXT:51|52|-1}
(*) BOOL
059B0CAB  B8 00 00 00 00                mov eax, 00H
059B0CB0  84 C0                         test al, al
059B0CB2  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q255+3

#205		
#206					(* Comando_PdC := FALSE; *)
#207					MOVE		FALSE,Comando_PdC	{LNXT:52|53|-1}
(*) BOOL
059B0CB9  B8 00 00 00 00                mov eax, 00H
059B0CBE  84 C0                         test al, al
059B0CC0  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q255+1

#208		
#209					(* Comando_pompa_UTA := FALSE; *)
#210					MOVE		FALSE,Comando_pompa_UTA	{LNXT:53|55|-1}
(*) BOOL
059B0CC7  B8 00 00 00 00                mov eax, 00H
059B0CCC  84 C0                         test al, al
059B0CCE  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q255+2

#211		
#212		
#213					(* IF Temp_accumulo < Temp_setpoint_inverno - T_tolleranza_inverno *)
#214					LD		Temp_accumulo	{LNXT:55|-1|-1}
(*) UNDEF
059B0CD5  D9 05 CC CC CC CC             fld  [CCCCCCCCH] ; $$DATA$$+32

#215					LT(		Temp_setpoint_inverno	{LNXT:55|-1|-1}
(*) REAL
059B0CDB  81 EC 04 00 00 00             sub esp, 4
059B0CE1  D9 1C 24                      fstp [esp]
059B0CE4  D9 05 CC CC CC CC             fld  [CCCCCCCCH] ; %M100+208

#216					SUB		T_tolleranza_inverno	{LNXT:55|-1|-1}
(*) REAL
059B0CEA  D8 25 CC CC CC CC             fsub [CCCCCCCCH] ; %M100+204

#217					)	{LNXT:55|-1|-1}
(*) REAL
059B0CF0  81 EC 04 00 00 00             sub esp, 4
059B0CF6  D9 1C 24                      fstp [esp]
059B0CF9  D9 44 24 04                   fld 4[esp]
059B0CFD  D8 1C 24                      fcomp  [esp]
059B0D00  DF E0                         fnstsw ax
059B0D02  F6 C4 01                      test ah, 1h
059B0D05  0F 95 C0                      setne al 
059B0D08  25 FF 00 00 00                and eax, 0FFh
059B0D0D  81 C4 08 00 00 00             add esp, 8

#218					JMPCN	$label18	{LNXT:55|56|65}
(-) BOOL
059B0D13  84 C0                         test al, al
059B0D15  0F 84 BA 00 00 00             je 059B0DD5H

#219		
#220					(* THEN *)
#221		
#222						(* Comando_caldaia := TRUE; *)
#223						MOVE		TRUE,Comando_caldaia	{LNXT:56|57|-1}
(*) BOOL
059B0D1B  DD C0                         ffree
059B0D1D  D9 F7                         fincstp
059B0D1F  B8 01 00 00 00                mov eax, 01H
059B0D24  84 C0                         test al, al
059B0D26  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q255+0

#224		
#225						(* Delay.IN:=TRUE; *)
#226						MOVE		TRUE,Delay.IN	{LNXT:57|58|-1}
(*) BOOL
059B0D2D  B8 01 00 00 00                mov eax, 01H
059B0D32  84 C0                         test al, al
059B0D34  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+64

#227		
#228		
#229						(* IF Delay.Q AND Temp_accumulo > Temp_setpoint_inverno - T_tolleranza_inverno *)
#230						LD		Temp_accumulo	{LNXT:58|-1|-1}
(*) UNDEF
059B0D3B  D9 05 CC CC CC CC             fld  [CCCCCCCCH] ; $$DATA$$+32

#231						GT(		Temp_setpoint_inverno	{LNXT:58|-1|-1}
(*) REAL
059B0D41  81 EC 04 00 00 00             sub esp, 4
059B0D47  D9 1C 24                      fstp [esp]
059B0D4A  D9 05 CC CC CC CC             fld  [CCCCCCCCH] ; %M100+208

#232						SUB		T_tolleranza_inverno	{LNXT:58|-1|-1}
(*) REAL
059B0D50  D8 25 CC CC CC CC             fsub [CCCCCCCCH] ; %M100+204

#233						)	{LNXT:58|-1|-1}
(*) REAL
059B0D56  81 EC 04 00 00 00             sub esp, 4
059B0D5C  D9 1C 24                      fstp [esp]
059B0D5F  D9 44 24 04                   fld 4[esp]
059B0D63  D8 1C 24                      fcomp  [esp]
059B0D66  DF E0                         fnstsw ax
059B0D68  F6 C4 41                      test ah, 41h
059B0D6B  0F 94 C0                      sete al 
059B0D6E  25 FF 00 00 00                and eax, 0FFh
059B0D73  81 C4 08 00 00 00             add esp, 8

#234						AND		Delay.Q	{LNXT:58|-1|-1}
(*) BOOL
059B0D79  33 C9                         xor ecx, ecx
059B0D7B  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+69
059B0D81  23 C1                         and eax, ecx

#235						JMPCN	$label20	{LNXT:58|59|62}
(-) BOOL
059B0D83  84 C0                         test al, al
059B0D85  90 74 26 90 90 90             je 059B0DAEH

#236		
#237						(* THEN *)
#238		
#239							(* Delay.IN:=FALSE; *)
#240							MOVE		FALSE,Delay.IN	{LNXT:59|60|-1}
(*) BOOL
059B0D8B  DD C0                         ffree
059B0D8D  D9 F7                         fincstp
059B0D8F  B8 00 00 00 00                mov eax, 00H
059B0D94  84 C0                         test al, al
059B0D96  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+64

#241		
#242							(* Fase := 3; *)
#243							MOVE		3,Fase	{LNXT:60|1|-1}
(*) BOOL
059B0D9D  B8 03 00 00 00                mov eax, 03H
059B0DA2  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+30

#244							JMP		$label21	{LNXT:58|59|62}
(-) INT
059B0DA9  EB 25 90 90 90                jmp 059B0DD0H

#245		$label20:
#246		
#247						(* ELSE *)
#248		
#249							(* Delay.IN:=NOT Delay.Q; *)
#250							LD		Delay.Q	{LNXT:62|63|-1}
(*) UNDEF
059B0DAE  33 C0                         xor eax, eax
059B0DB0  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+69

#251							NOT	{LNXT:62|63|-1}
(*) BOOL
059B0DB6  84 C0                         test al, al
059B0DB8  0F 94 C0                      sete al

#252							ST		Delay.IN	{LNXT:62|63|-1}
(*) BOOL
059B0DBB  84 C0                         test al, al
059B0DBD  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+64

#253		
#254							(* Fase := 2; *)
#255							MOVE		2,Fase	{LNXT:63|1|-1}
(*) BOOL
059B0DC4  B8 02 00 00 00                mov eax, 02H
059B0DC9  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+30

#256		
#257		$label21:
#258						(* END_IF *)
#259						JMP		$label19	{LNXT:55|56|65}
(-) INT
059B0DD0  EB 67 90 90 90                jmp 059B0E39H

#260		$label18:
#261		
#262					(* ELSIF Temp_accumulo > Temp_setpoint_inverno - T_tolleranza_inverno *)
#263					LD		Temp_accumulo	{LNXT:65|-1|-1}
(*) UNDEF
059B0DD5  D9 05 CC CC CC CC             fld  [CCCCCCCCH] ; $$DATA$$+32

#264					GT(		Temp_setpoint_inverno	{LNXT:65|-1|-1}
(*) REAL
059B0DDB  81 EC 04 00 00 00             sub esp, 4
059B0DE1  D9 1C 24                      fstp [esp]
059B0DE4  D9 05 CC CC CC CC             fld  [CCCCCCCCH] ; %M100+208

#265					SUB		T_tolleranza_inverno	{LNXT:65|-1|-1}
(*) REAL
059B0DEA  D8 25 CC CC CC CC             fsub [CCCCCCCCH] ; %M100+204

#266					)	{LNXT:65|-1|-1}
(*) REAL
059B0DF0  81 EC 04 00 00 00             sub esp, 4
059B0DF6  D9 1C 24                      fstp [esp]
059B0DF9  D9 44 24 04                   fld 4[esp]
059B0DFD  D8 1C 24                      fcomp  [esp]
059B0E00  DF E0                         fnstsw ax
059B0E02  F6 C4 41                      test ah, 41h
059B0E05  0F 94 C0                      sete al 
059B0E08  25 FF 00 00 00                and eax, 0FFh
059B0E0D  81 C4 08 00 00 00             add esp, 8

#267					JMPCN	$label19	{LNXT:65|66|1}
(-) BOOL
059B0E13  84 C0                         test al, al
059B0E15  90 74 21 90 90 90             je 059B0E39H

#268		
#269					(* THEN *)
#270		
#271						(* Delay.IN:=FALSE; *)
#272						MOVE		FALSE,Delay.IN	{LNXT:66|67|-1}
(*) BOOL
059B0E1B  DD C0                         ffree
059B0E1D  D9 F7                         fincstp
059B0E1F  B8 00 00 00 00                mov eax, 00H
059B0E24  84 C0                         test al, al
059B0E26  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+64

#273		
#274						(* Fase := 3; *)
#275						MOVE		3,Fase	{LNXT:67|1|-1}
(*) BOOL
059B0E2D  B8 03 00 00 00                mov eax, 03H
059B0E32  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+30

#276		
#277		$label19:
#278					(* END_IF *)
#279					JMP		$label2	{LNXT:50|1|-1}
(-) INT
059B0E39  E9 8F 05 00 00                jmp 059B13CDH

#280		
#281		$label6:
#282		
#283					(* IF Blocco_caldaia *)
#284					LD		Blocco_caldaia	{LNXT:71|-1|-1}
(*) UNDEF
059B0E3E  33 C0                         xor eax, eax
059B0E40  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %I255+1

#285					JMPCN	$label22	{LNXT:71|72|74}
(-) BOOL
059B0E46  84 C0                         test al, al
059B0E48  90 74 14 90 90 90             je 059B0E5FH

#286		
#287					(* THEN *)
#288		
#289						(* Fase := 1; *)
#290						MOVE		1,Fase	{LNXT:72|1|-1}
(*) BOOL
059B0E4E  B8 01 00 00 00                mov eax, 01H
059B0E53  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+30

#291						JMP		$label23	{LNXT:71|72|74}
(-) INT
059B0E5A  E9 DB 00 00 00                jmp 059B0F3AH

#292		$label22:
#293		
#294					(* ELSE *)
#295		
#296						(* Comando_caldaia := TRUE; *)
#297						MOVE		TRUE,Comando_caldaia	{LNXT:74|75|-1}
(*) INT
059B0E5F  B8 01 00 00 00                mov eax, 01H
059B0E64  84 C0                         test al, al
059B0E66  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q255+0

#298		
#299						(* Comando_pompa_fancoil := TRUE; *)
#300						MOVE		TRUE,Comando_pompa_fancoil	{LNXT:75|76|-1}
(*) BOOL
059B0E6D  B8 01 00 00 00                mov eax, 01H
059B0E72  84 C0                         test al, al
059B0E74  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q255+3

#301		
#302						(* Comando_PdC := FALSE; *)
#303						MOVE		FALSE,Comando_PdC	{LNXT:76|77|-1}
(*) BOOL
059B0E7B  B8 00 00 00 00                mov eax, 00H
059B0E80  84 C0                         test al, al
059B0E82  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q255+1

#304		
#305						(* Comando_pompa_UTA := FALSE; *)
#306						MOVE		FALSE,Comando_pompa_UTA	{LNXT:77|79|-1}
(*) BOOL
059B0E89  B8 00 00 00 00                mov eax, 00H
059B0E8E  84 C0                         test al, al
059B0E90  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q255+2

#307		
#308						(* Delay.IN:=TRUE; *)
#309						MOVE		TRUE,Delay.IN	{LNXT:79|80|-1}
(*) BOOL
059B0E97  B8 01 00 00 00                mov eax, 01H
059B0E9C  84 C0                         test al, al
059B0E9E  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+64

#310		
#311		
#312						(* IF Delay.Q AND Temp_accumulo > Temp_setpoint_inverno - T_tolleranza_inverno *)
#313						LD		Temp_accumulo	{LNXT:80|-1|-1}
(*) UNDEF
059B0EA5  D9 05 CC CC CC CC             fld  [CCCCCCCCH] ; $$DATA$$+32

#314						GT(		Temp_setpoint_inverno	{LNXT:80|-1|-1}
(*) REAL
059B0EAB  81 EC 04 00 00 00             sub esp, 4
059B0EB1  D9 1C 24                      fstp [esp]
059B0EB4  D9 05 CC CC CC CC             fld  [CCCCCCCCH] ; %M100+208

#315						SUB		T_tolleranza_inverno	{LNXT:80|-1|-1}
(*) REAL
059B0EBA  D8 25 CC CC CC CC             fsub [CCCCCCCCH] ; %M100+204

#316						)	{LNXT:80|-1|-1}
(*) REAL
059B0EC0  81 EC 04 00 00 00             sub esp, 4
059B0EC6  D9 1C 24                      fstp [esp]
059B0EC9  D9 44 24 04                   fld 4[esp]
059B0ECD  D8 1C 24                      fcomp  [esp]
059B0ED0  DF E0                         fnstsw ax
059B0ED2  F6 C4 41                      test ah, 41h
059B0ED5  0F 94 C0                      sete al 
059B0ED8  25 FF 00 00 00                and eax, 0FFh
059B0EDD  81 C4 08 00 00 00             add esp, 8

#317						AND		Delay.Q	{LNXT:80|-1|-1}
(*) BOOL
059B0EE3  33 C9                         xor ecx, ecx
059B0EE5  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+69
059B0EEB  23 C1                         and eax, ecx

#318						JMPCN	$label24	{LNXT:80|81|84}
(-) BOOL
059B0EED  84 C0                         test al, al
059B0EEF  90 74 26 90 90 90             je 059B0F18H

#319		
#320						(* THEN *)
#321		
#322							(* Delay.IN:=FALSE; *)
#323							MOVE		FALSE,Delay.IN	{LNXT:81|82|-1}
(*) BOOL
059B0EF5  DD C0                         ffree
059B0EF7  D9 F7                         fincstp
059B0EF9  B8 00 00 00 00                mov eax, 00H
059B0EFE  84 C0                         test al, al
059B0F00  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+64

#324		
#325							(* Fase := 4; *)
#326							MOVE		4,Fase	{LNXT:82|1|-1}
(*) BOOL
059B0F07  B8 04 00 00 00                mov eax, 04H
059B0F0C  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+30

#327							JMP		$label25	{LNXT:80|81|84}
(-) INT
059B0F13  EB 25 90 90 90                jmp 059B0F3AH

#328		$label24:
#329		
#330						(* ELSE *)
#331		
#332							(* Delay.IN:=NOT Delay.Q; *)
#333							LD		Delay.Q	{LNXT:84|85|-1}
(*) UNDEF
059B0F18  33 C0                         xor eax, eax
059B0F1A  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+69

#334							NOT	{LNXT:84|85|-1}
(*) BOOL
059B0F20  84 C0                         test al, al
059B0F22  0F 94 C0                      sete al

#335							ST		Delay.IN	{LNXT:84|85|-1}
(*) BOOL
059B0F25  84 C0                         test al, al
059B0F27  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+64

#336		
#337							(* Fase :=3; *)
#338							MOVE		3,Fase	{LNXT:85|1|-1}
(*) BOOL
059B0F2E  B8 03 00 00 00                mov eax, 03H
059B0F33  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+30

#339		
#340		$label25:
#341						(* END_IF *)
#342		
#343		$label23:
#344					(* END_IF *)
#345					JMP		$label2	{LNXT:1|74|-1}
(-) INT
059B0F3A  E9 8E 04 00 00                jmp 059B13CDH

#346		
#347		$label7:
#348		
#349					(* IF Blocco_PdC *)
#350					LD		Blocco_PdC	{LNXT:89|-1|-1}
(*) UNDEF
059B0F3F  33 C0                         xor eax, eax
059B0F41  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %I255+3

#351					JMPCN	$label26	{LNXT:89|90|1}
(-) BOOL
059B0F47  84 C0                         test al, al
059B0F49  0F 84 03 01 00 00             je 059B1052H

#352		
#353					(* THEN *)
#354		
#355						(* Fase := 7; *)
#356						MOVE		7,Fase	{LNXT:90|91|-1}
(*) BOOL
059B0F4F  B8 07 00 00 00                mov eax, 07H
059B0F54  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+30

#357		
#358						(* Comando_caldaia := FALSE; *)
#359						MOVE		FALSE,Comando_caldaia	{LNXT:91|92|-1}
(*) INT
059B0F5B  B8 00 00 00 00                mov eax, 00H
059B0F60  84 C0                         test al, al
059B0F62  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q255+0

#360		
#361						(* Comando_pompa_fancoil := TRUE; *)
#362						MOVE		TRUE,Comando_pompa_fancoil	{LNXT:92|93|-1}
(*) BOOL
059B0F69  B8 01 00 00 00                mov eax, 01H
059B0F6E  84 C0                         test al, al
059B0F70  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q255+3

#363		
#364						(* Comando_PdC := TRUE; *)
#365						MOVE		TRUE,Comando_PdC	{LNXT:93|94|-1}
(*) BOOL
059B0F77  B8 01 00 00 00                mov eax, 01H
059B0F7C  84 C0                         test al, al
059B0F7E  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q255+1

#366		
#367						(* Comando_pompa_UTA := FALSE; *)
#368						MOVE		FALSE,Comando_pompa_UTA	{LNXT:94|96|-1}
(*) BOOL
059B0F85  B8 00 00 00 00                mov eax, 00H
059B0F8A  84 C0                         test al, al
059B0F8C  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q255+2

#369		
#370						(* Delay.IN:=TRUE; *)
#371						MOVE		TRUE,Delay.IN	{LNXT:96|97|-1}
(*) BOOL
059B0F93  B8 01 00 00 00                mov eax, 01H
059B0F98  84 C0                         test al, al
059B0F9A  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+64

#372		
#373		
#374						(* IF Delay.Q AND Temp_accumulo > Temp_setpoint_inverno - T_tolleranza_inverno *)
#375						LD		Temp_accumulo	{LNXT:97|-1|-1}
(*) UNDEF
059B0FA1  D9 05 CC CC CC CC             fld  [CCCCCCCCH] ; $$DATA$$+32

#376						GT(		Temp_setpoint_inverno	{LNXT:97|-1|-1}
(*) REAL
059B0FA7  81 EC 04 00 00 00             sub esp, 4
059B0FAD  D9 1C 24                      fstp [esp]
059B0FB0  D9 05 CC CC CC CC             fld  [CCCCCCCCH] ; %M100+208

#377						SUB		T_tolleranza_inverno	{LNXT:97|-1|-1}
(*) REAL
059B0FB6  D8 25 CC CC CC CC             fsub [CCCCCCCCH] ; %M100+204

#378						)	{LNXT:97|-1|-1}
(*) REAL
059B0FBC  81 EC 04 00 00 00             sub esp, 4
059B0FC2  D9 1C 24                      fstp [esp]
059B0FC5  D9 44 24 04                   fld 4[esp]
059B0FC9  D8 1C 24                      fcomp  [esp]
059B0FCC  DF E0                         fnstsw ax
059B0FCE  F6 C4 41                      test ah, 41h
059B0FD1  0F 94 C0                      sete al 
059B0FD4  25 FF 00 00 00                and eax, 0FFh
059B0FD9  81 C4 08 00 00 00             add esp, 8

#379						AND		Delay.Q	{LNXT:97|-1|-1}
(*) BOOL
059B0FDF  33 C9                         xor ecx, ecx
059B0FE1  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+69
059B0FE7  23 C1                         and eax, ecx

#380						JMPCN	$label27	{LNXT:97|98|102}
(-) BOOL
059B0FE9  84 C0                         test al, al
059B0FEB  90 74 34 90 90 90             je 059B1022H

#381		
#382						(* THEN *)
#383		
#384							(* Comando_pompa_fancoil := TRUE; *)
#385							MOVE		TRUE,Comando_pompa_fancoil	{LNXT:98|99|-1}
(*) BOOL
059B0FF1  DD C0                         ffree
059B0FF3  D9 F7                         fincstp
059B0FF5  B8 01 00 00 00                mov eax, 01H
059B0FFA  84 C0                         test al, al
059B0FFC  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q255+3

#386		
#387							(* Delay.IN:=FALSE; *)
#388							MOVE		FALSE,Delay.IN	{LNXT:99|100|-1}
(*) BOOL
059B1003  B8 00 00 00 00                mov eax, 00H
059B1008  84 C0                         test al, al
059B100A  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+64

#389		
#390							(* Fase := 5; *)
#391							MOVE		5,Fase	{LNXT:100|1|-1}
(*) BOOL
059B1011  B8 05 00 00 00                mov eax, 05H
059B1016  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+30

#392							JMP		$label28	{LNXT:97|98|102}
(-) INT
059B101D  EB 33 90 90 90                jmp 059B1052H

#393		$label27:
#394		
#395						(* ELSE *)
#396		
#397							(* Comando_pompa_fancoil := FALSE; *)
#398							MOVE		FALSE,Comando_pompa_fancoil	{LNXT:102|103|-1}
(*) INT
059B1022  B8 00 00 00 00                mov eax, 00H
059B1027  84 C0                         test al, al
059B1029  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q255+3

#399		
#400							(* Delay.IN:=NOT Delay.Q; *)
#401							LD		Delay.Q	{LNXT:103|104|-1}
(*) UNDEF
059B1030  33 C0                         xor eax, eax
059B1032  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+69

#402							NOT	{LNXT:103|104|-1}
(*) BOOL
059B1038  84 C0                         test al, al
059B103A  0F 94 C0                      sete al

#403							ST		Delay.IN	{LNXT:103|104|-1}
(*) BOOL
059B103D  84 C0                         test al, al
059B103F  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+64

#404		
#405							(* Fase := 4; *)
#406							MOVE		4,Fase	{LNXT:104|1|-1}
(*) BOOL
059B1046  B8 04 00 00 00                mov eax, 04H
059B104B  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+30

#407		
#408		$label28:
#409						(* END_IF *)
#410		
#411		$label26:
#412					(* END_IF *)
#413					JMP		$label2	{LNXT:1|1|-1}
(-) INT
059B1052  E9 76 03 00 00                jmp 059B13CDH

#414		
#415		$label8:
#416					(* Comando_caldaia := FALSE; *)
#417					MOVE		FALSE,Comando_caldaia	{LNXT:109|110|-1}
(*) INT
059B1057  B8 00 00 00 00                mov eax, 00H
059B105C  84 C0                         test al, al
059B105E  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q255+0

#418		
#419					(* Comando_pompa_fancoil := TRUE; *)
#420					MOVE		TRUE,Comando_pompa_fancoil	{LNXT:110|111|-1}
(*) BOOL
059B1065  B8 01 00 00 00                mov eax, 01H
059B106A  84 C0                         test al, al
059B106C  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q255+3

#421		
#422					(* Comando_PdC := TRUE; *)
#423					MOVE		TRUE,Comando_PdC	{LNXT:111|112|-1}
(*) BOOL
059B1073  B8 01 00 00 00                mov eax, 01H
059B1078  84 C0                         test al, al
059B107A  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q255+1

#424		
#425					(* Comando_pompa_UTA := TRUE; *)
#426					MOVE		TRUE,Comando_pompa_UTA	{LNXT:112|114|-1}
(*) BOOL
059B1081  B8 01 00 00 00                mov eax, 01H
059B1086  84 C0                         test al, al
059B1088  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q255+2

#427		
#428					(* Delay.IN := TRUE; *)
#429					MOVE		TRUE,Delay.IN	{LNXT:114|115|-1}
(*) BOOL
059B108F  B8 01 00 00 00                mov eax, 01H
059B1094  84 C0                         test al, al
059B1096  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+64

#430		
#431		
#432					(* IF Temp_accumulo < Temp_setpoint_inverno - T_tolleranza_inverno - 3 *)
#433					LD		Temp_accumulo	{LNXT:115|-1|-1}
(*) UNDEF
059B109D  D9 05 CC CC CC CC             fld  [CCCCCCCCH] ; $$DATA$$+32

#434					LT(		Temp_setpoint_inverno	{LNXT:115|-1|-1}
(*) REAL
059B10A3  81 EC 04 00 00 00             sub esp, 4
059B10A9  D9 1C 24                      fstp [esp]
059B10AC  D9 05 CC CC CC CC             fld  [CCCCCCCCH] ; %M100+208

#435					SUB		T_tolleranza_inverno	{LNXT:115|-1|-1}
(*) REAL
059B10B2  D8 25 CC CC CC CC             fsub [CCCCCCCCH] ; %M100+204

#436					SUB		3	{LNXT:115|-1|-1}
(*) REAL
059B10B8  68 03 00 00 00                push 3
059B10BD  DA 24 24                      fisub [esp]
059B10C0  81 C4 04 00 00 00             add esp, 4

#437					)	{LNXT:115|-1|-1}
(*) REAL
059B10C6  81 EC 04 00 00 00             sub esp, 4
059B10CC  D9 1C 24                      fstp [esp]
059B10CF  D9 44 24 04                   fld 4[esp]
059B10D3  D8 1C 24                      fcomp  [esp]
059B10D6  DF E0                         fnstsw ax
059B10D8  F6 C4 01                      test ah, 1h
059B10DB  0F 95 C0                      setne al 
059B10DE  25 FF 00 00 00                and eax, 0FFh
059B10E3  81 C4 08 00 00 00             add esp, 8

#438					JMPCN	$label29	{LNXT:115|116|119}
(-) BOOL
059B10E9  84 C0                         test al, al
059B10EB  90 74 3C 90 90 90             je 059B112AH

#439		
#440					(* THEN *)
#441		
#442						(* Comando_caldaia := TRUE; *)
#443						MOVE		TRUE,Comando_caldaia	{LNXT:116|117|-1}
(*) BOOL
059B10F1  DD C0                         ffree
059B10F3  D9 F7                         fincstp
059B10F5  B8 01 00 00 00                mov eax, 01H
059B10FA  84 C0                         test al, al
059B10FC  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q255+0

#444		
#445						(* Delay.IN := NOT Delay.Q; *)
#446						LD		Delay.Q	{LNXT:117|118|-1}
(*) UNDEF
059B1103  33 C0                         xor eax, eax
059B1105  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+69

#447						NOT	{LNXT:117|118|-1}
(*) BOOL
059B110B  84 C0                         test al, al
059B110D  0F 94 C0                      sete al

#448						ST		Delay.IN	{LNXT:117|118|-1}
(*) BOOL
059B1110  84 C0                         test al, al
059B1112  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+64

#449		
#450						(* Fase := 6; *)
#451						MOVE		6,Fase	{LNXT:118|1|-1}
(*) BOOL
059B1119  B8 06 00 00 00                mov eax, 06H
059B111E  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+30

#452						JMP		$label31	{LNXT:115|116|119}
(-) INT
059B1125  E9 A3 00 00 00                jmp 059B11CDH

#453		$label29:
#454		
#455					(* ELSIF Delay.Q AND Temp_accumulo > Temp_setpoint_inverno - T_tolleranza_inverno *)
#456					LD		Temp_accumulo	{LNXT:119|-1|-1}
(*) UNDEF
059B112A  D9 05 CC CC CC CC             fld  [CCCCCCCCH] ; $$DATA$$+32

#457					GT(		Temp_setpoint_inverno	{LNXT:119|-1|-1}
(*) REAL
059B1130  81 EC 04 00 00 00             sub esp, 4
059B1136  D9 1C 24                      fstp [esp]
059B1139  D9 05 CC CC CC CC             fld  [CCCCCCCCH] ; %M100+208

#458					SUB		T_tolleranza_inverno	{LNXT:119|-1|-1}
(*) REAL
059B113F  D8 25 CC CC CC CC             fsub [CCCCCCCCH] ; %M100+204

#459					)	{LNXT:119|-1|-1}
(*) REAL
059B1145  81 EC 04 00 00 00             sub esp, 4
059B114B  D9 1C 24                      fstp [esp]
059B114E  D9 44 24 04                   fld 4[esp]
059B1152  D8 1C 24                      fcomp  [esp]
059B1155  DF E0                         fnstsw ax
059B1157  F6 C4 41                      test ah, 41h
059B115A  0F 94 C0                      sete al 
059B115D  25 FF 00 00 00                and eax, 0FFh
059B1162  81 C4 08 00 00 00             add esp, 8

#460					AND		Delay.Q	{LNXT:119|-1|-1}
(*) BOOL
059B1168  33 C9                         xor ecx, ecx
059B116A  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+69
059B1170  23 C1                         and eax, ecx

#461					JMPCN	$label30	{LNXT:119|120|124}
(-) BOOL
059B1172  84 C0                         test al, al
059B1174  90 74 3C 90 90 90             je 059B11B3H

#462		
#463					(* THEN *)
#464		
#465						(* Comando_caldaia := FALSE; *)
#466						MOVE		FALSE,Comando_caldaia	{LNXT:120|121|-1}
(*) BOOL
059B117A  DD C0                         ffree
059B117C  D9 F7                         fincstp
059B117E  B8 00 00 00 00                mov eax, 00H
059B1183  84 C0                         test al, al
059B1185  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q255+0

#467		
#468						(* Delay.IN := NOT Delay.Q; *)
#469						LD		Delay.Q	{LNXT:121|122|-1}
(*) UNDEF
059B118C  33 C0                         xor eax, eax
059B118E  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+69

#470						NOT	{LNXT:121|122|-1}
(*) BOOL
059B1194  84 C0                         test al, al
059B1196  0F 94 C0                      sete al

#471						ST		Delay.IN	{LNXT:121|122|-1}
(*) BOOL
059B1199  84 C0                         test al, al
059B119B  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+64

#472		
#473						(* Fase := 5; *)
#474						MOVE		5,Fase	{LNXT:122|1|-1}
(*) BOOL
059B11A2  B8 05 00 00 00                mov eax, 05H
059B11A7  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+30

#475						JMP		$label31	{LNXT:119|120|124}
(-) INT
059B11AE  EB 1D 90 90 90                jmp 059B11CDH

#476		$label30:
#477		
#478					(* ELSE *)
#479		
#480						(* Fase := 5; *)
#481						MOVE		5,Fase	{LNXT:124|125|-1}
(*) INT
059B11B3  B8 05 00 00 00                mov eax, 05H
059B11B8  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+30

#482		
#483						(* Delay.IN := FALSE; *)
#484						MOVE		FALSE,Delay.IN	{LNXT:125|1|-1}
(*) INT
059B11BF  B8 00 00 00 00                mov eax, 00H
059B11C4  84 C0                         test al, al
059B11C6  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+64

#485		
#486		$label31:
#487					(* END_IF *)
#488					JMP		$label2	{LNXT:109|124|-1}
(-) BOOL
059B11CD  E9 FB 01 00 00                jmp 059B13CDH

#489		
#490		$label9:
#491					(* Delay.IN := TRUE; *)
#492					MOVE		TRUE,Delay.IN	{LNXT:129|130|-1}
(*) BOOL
059B11D2  B8 01 00 00 00                mov eax, 01H
059B11D7  84 C0                         test al, al
059B11D9  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+64

#493		
#494		
#495					(* IF Delay.Q AND Temp_accumulo < Temp_setpoint_inverno - T_tolleranza_inverno *)
#496					LD		Temp_accumulo	{LNXT:130|-1|-1}
(*) UNDEF
059B11E0  D9 05 CC CC CC CC             fld  [CCCCCCCCH] ; $$DATA$$+32

#497					LT(		Temp_setpoint_inverno	{LNXT:130|-1|-1}
(*) REAL
059B11E6  81 EC 04 00 00 00             sub esp, 4
059B11EC  D9 1C 24                      fstp [esp]
059B11EF  D9 05 CC CC CC CC             fld  [CCCCCCCCH] ; %M100+208

#498					SUB		T_tolleranza_inverno	{LNXT:130|-1|-1}
(*) REAL
059B11F5  D8 25 CC CC CC CC             fsub [CCCCCCCCH] ; %M100+204

#499					)	{LNXT:130|-1|-1}
(*) REAL
059B11FB  81 EC 04 00 00 00             sub esp, 4
059B1201  D9 1C 24                      fstp [esp]
059B1204  D9 44 24 04                   fld 4[esp]
059B1208  D8 1C 24                      fcomp  [esp]
059B120B  DF E0                         fnstsw ax
059B120D  F6 C4 01                      test ah, 1h
059B1210  0F 95 C0                      setne al 
059B1213  25 FF 00 00 00                and eax, 0FFh
059B1218  81 C4 08 00 00 00             add esp, 8

#500					AND		Delay.Q	{LNXT:130|-1|-1}
(*) BOOL
059B121E  33 C9                         xor ecx, ecx
059B1220  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+69
059B1226  23 C1                         and eax, ecx

#501					JMPCN	$label32	{LNXT:130|131|134}
(-) BOOL
059B1228  84 C0                         test al, al
059B122A  90 74 3C 90 90 90             je 059B1269H

#502		
#503					(* THEN *)
#504		
#505						(* Comando_caldaia := TRUE; *)
#506						MOVE		TRUE,Comando_caldaia	{LNXT:131|132|-1}
(*) BOOL
059B1230  DD C0                         ffree
059B1232  D9 F7                         fincstp
059B1234  B8 01 00 00 00                mov eax, 01H
059B1239  84 C0                         test al, al
059B123B  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q255+0

#507		
#508						(* Delay.IN := NOT Delay.Q; *)
#509						LD		Delay.Q	{LNXT:132|133|-1}
(*) UNDEF
059B1242  33 C0                         xor eax, eax
059B1244  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+69

#510						NOT	{LNXT:132|133|-1}
(*) BOOL
059B124A  84 C0                         test al, al
059B124C  0F 94 C0                      sete al

#511						ST		Delay.IN	{LNXT:132|133|-1}
(*) BOOL
059B124F  84 C0                         test al, al
059B1251  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+64

#512		
#513						(* Fase := 6; *)
#514						MOVE		6,Fase	{LNXT:133|1|-1}
(*) BOOL
059B1258  B8 06 00 00 00                mov eax, 06H
059B125D  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+30

#515						JMP		$label33	{LNXT:130|131|134}
(-) INT
059B1264  EB 67 90 90 90                jmp 059B12CDH

#516		$label32:
#517		
#518					(* ELSIF Temp_accumulo >= Temp_setpoint_inverno - T_tolleranza_inverno *)
#519					LD		Temp_accumulo	{LNXT:134|-1|-1}
(*) UNDEF
059B1269  D9 05 CC CC CC CC             fld  [CCCCCCCCH] ; $$DATA$$+32

#520					GE(		Temp_setpoint_inverno	{LNXT:134|-1|-1}
(*) REAL
059B126F  81 EC 04 00 00 00             sub esp, 4
059B1275  D9 1C 24                      fstp [esp]
059B1278  D9 05 CC CC CC CC             fld  [CCCCCCCCH] ; %M100+208

#521					SUB		T_tolleranza_inverno	{LNXT:134|-1|-1}
(*) REAL
059B127E  D8 25 CC CC CC CC             fsub [CCCCCCCCH] ; %M100+204

#522					)	{LNXT:134|-1|-1}
(*) REAL
059B1284  81 EC 04 00 00 00             sub esp, 4
059B128A  D9 1C 24                      fstp [esp]
059B128D  D9 44 24 04                   fld 4[esp]
059B1291  D8 1C 24                      fcomp  [esp]
059B1294  DF E0                         fnstsw ax
059B1296  F6 C4 01                      test ah, 1h
059B1299  0F 94 C0                      sete al 
059B129C  25 FF 00 00 00                and eax, 0FFh
059B12A1  81 C4 08 00 00 00             add esp, 8

#523					JMPCN	$label33	{LNXT:134|135|1}
(-) BOOL
059B12A7  84 C0                         test al, al
059B12A9  90 74 21 90 90 90             je 059B12CDH

#524		
#525					(* THEN *)
#526		
#527						(* Comando_caldaia := FALSE; *)
#528						MOVE		FALSE,Comando_caldaia	{LNXT:135|136|-1}
(*) BOOL
059B12AF  DD C0                         ffree
059B12B1  D9 F7                         fincstp
059B12B3  B8 00 00 00 00                mov eax, 00H
059B12B8  84 C0                         test al, al
059B12BA  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q255+0

#529		
#530						(* Fase := 5; *)
#531						MOVE		5,Fase	{LNXT:136|1|-1}
(*) BOOL
059B12C1  B8 05 00 00 00                mov eax, 05H
059B12C6  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+30

#532		
#533		$label33:
#534					(* END_IF *)
#535					JMP		$label2	{LNXT:129|1|-1}
(-) INT
059B12CD  E9 FB 00 00 00                jmp 059B13CDH

#536		
#537		$label10:
#538					(* Delay.IN := TRUE; *)
#539					MOVE		TRUE,Delay.IN	{LNXT:140|141|-1}
(*) INT
059B12D2  B8 01 00 00 00                mov eax, 01H
059B12D7  84 C0                         test al, al
059B12D9  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+64

#540		
#541		
#542					(* IF Delay.Q AND Temp_accumulo < Temp_setpoint_inverno - T_tolleranza_inverno *)
#543					LD		Temp_accumulo	{LNXT:141|-1|-1}
(*) UNDEF
059B12E0  D9 05 CC CC CC CC             fld  [CCCCCCCCH] ; $$DATA$$+32

#544					LT(		Temp_setpoint_inverno	{LNXT:141|-1|-1}
(*) REAL
059B12E6  81 EC 04 00 00 00             sub esp, 4
059B12EC  D9 1C 24                      fstp [esp]
059B12EF  D9 05 CC CC CC CC             fld  [CCCCCCCCH] ; %M100+208

#545					SUB		T_tolleranza_inverno	{LNXT:141|-1|-1}
(*) REAL
059B12F5  D8 25 CC CC CC CC             fsub [CCCCCCCCH] ; %M100+204

#546					)	{LNXT:141|-1|-1}
(*) REAL
059B12FB  81 EC 04 00 00 00             sub esp, 4
059B1301  D9 1C 24                      fstp [esp]
059B1304  D9 44 24 04                   fld 4[esp]
059B1308  D8 1C 24                      fcomp  [esp]
059B130B  DF E0                         fnstsw ax
059B130D  F6 C4 01                      test ah, 1h
059B1310  0F 95 C0                      setne al 
059B1313  25 FF 00 00 00                and eax, 0FFh
059B1318  81 C4 08 00 00 00             add esp, 8

#547					AND		Delay.Q	{LNXT:141|-1|-1}
(*) BOOL
059B131E  33 C9                         xor ecx, ecx
059B1320  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+69
059B1326  23 C1                         and eax, ecx

#548					JMPCN	$label34	{LNXT:141|142|145}
(-) BOOL
059B1328  84 C0                         test al, al
059B132A  90 74 3C 90 90 90             je 059B1369H

#549		
#550					(* THEN *)
#551		
#552						(* Comando_caldaia := TRUE; *)
#553						MOVE		TRUE,Comando_caldaia	{LNXT:142|143|-1}
(*) BOOL
059B1330  DD C0                         ffree
059B1332  D9 F7                         fincstp
059B1334  B8 01 00 00 00                mov eax, 01H
059B1339  84 C0                         test al, al
059B133B  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q255+0

#554		
#555						(* Delay.IN := NOT Delay.Q; *)
#556						LD		Delay.Q	{LNXT:143|144|-1}
(*) UNDEF
059B1342  33 C0                         xor eax, eax
059B1344  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+69

#557						NOT	{LNXT:143|144|-1}
(*) BOOL
059B134A  84 C0                         test al, al
059B134C  0F 94 C0                      sete al

#558						ST		Delay.IN	{LNXT:143|144|-1}
(*) BOOL
059B134F  84 C0                         test al, al
059B1351  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+64

#559		
#560						(* Fase := 6; *)
#561						MOVE		6,Fase	{LNXT:144|1|-1}
(*) BOOL
059B1358  B8 06 00 00 00                mov eax, 06H
059B135D  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+30

#562						JMP		$label35	{LNXT:141|142|145}
(-) INT
059B1364  EB 67 90 90 90                jmp 059B13CDH

#563		$label34:
#564		
#565					(* ELSIF Temp_accumulo >= Temp_setpoint_inverno - T_tolleranza_inverno *)
#566					LD		Temp_accumulo	{LNXT:145|-1|-1}
(*) UNDEF
059B1369  D9 05 CC CC CC CC             fld  [CCCCCCCCH] ; $$DATA$$+32

#567					GE(		Temp_setpoint_inverno	{LNXT:145|-1|-1}
(*) REAL
059B136F  81 EC 04 00 00 00             sub esp, 4
059B1375  D9 1C 24                      fstp [esp]
059B1378  D9 05 CC CC CC CC             fld  [CCCCCCCCH] ; %M100+208

#568					SUB		T_tolleranza_inverno	{LNXT:145|-1|-1}
(*) REAL
059B137E  D8 25 CC CC CC CC             fsub [CCCCCCCCH] ; %M100+204

#569					)	{LNXT:145|-1|-1}
(*) REAL
059B1384  81 EC 04 00 00 00             sub esp, 4
059B138A  D9 1C 24                      fstp [esp]
059B138D  D9 44 24 04                   fld 4[esp]
059B1391  D8 1C 24                      fcomp  [esp]
059B1394  DF E0                         fnstsw ax
059B1396  F6 C4 01                      test ah, 1h
059B1399  0F 94 C0                      sete al 
059B139C  25 FF 00 00 00                and eax, 0FFh
059B13A1  81 C4 08 00 00 00             add esp, 8

#570					JMPCN	$label35	{LNXT:145|146|1}
(-) BOOL
059B13A7  84 C0                         test al, al
059B13A9  90 74 21 90 90 90             je 059B13CDH

#571		
#572					(* THEN *)
#573		
#574						(* Comando_caldaia := TRUE; *)
#575						MOVE		TRUE,Comando_caldaia	{LNXT:146|147|-1}
(*) BOOL
059B13AF  DD C0                         ffree
059B13B1  D9 F7                         fincstp
059B13B3  B8 01 00 00 00                mov eax, 01H
059B13B8  84 C0                         test al, al
059B13BA  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q255+0

#576		
#577						(* Fase := 5; *)
#578						MOVE		5,Fase	{LNXT:147|1|-1}
(*) BOOL
059B13C1  B8 05 00 00 00                mov eax, 05H
059B13C6  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+30

#579		
#580		$label35:
#581					(* END_IF *)
#582		
#583		$label2:
#584		
#585				(* END_CASE *)
#586				JMP		$label1	{LNXT:1|3|152}
(-) INT
059B13CD  EB 7D 90 90 90                jmp 059B144CH

#587		$label0:
#588		
#589			(* ELSIF CalendarOnOff XOR NOT Estate_Inverno *)
#590			LD		Estate_Inverno	{LNXT:152|-1|-1}
(*) UNDEF
059B13D2  33 C0                         xor eax, eax
059B13D4  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %M100+0

#591			NOT	{LNXT:152|-1|-1}
(*) BOOL
059B13DA  84 C0                         test al, al
059B13DC  0F 94 C0                      sete al

#592			XOR(		CalendarOnOff	{LNXT:152|-1|-1}
(*) BOOL
059B13DF  50                            push eax
059B13E0  33 C0                         xor eax, eax
059B13E2  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+53

#593			NOT	{LNXT:152|-1|-1}
(*) BOOL
059B13E8  84 C0                         test al, al
059B13EA  0F 94 C0                      sete al

#594			)	{LNXT:152|-1|-1}
(*) BOOL
059B13ED  8B C8                         mov ecx, eax
059B13EF  58                            pop eax
059B13F0  33 C1                         xor eax, ecx

#595			JMPCN	$label1	{LNXT:152|153|1}
(-) BOOL
059B13F2  84 C0                         test al, al
059B13F4  90 74 55 90 90 90             je 059B144CH

#596		
#597			(* THEN *)
#598		
#599				(* Fase :=0; *)
#600				MOVE		0,Fase	{LNXT:153|154|-1}
(*) BOOL
059B13FA  B8 00 00 00 00                mov eax, 00H
059B13FF  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+30

#601		
#602				(* Delay.IN:=FALSE; *)
#603				MOVE		FALSE,Delay.IN	{LNXT:154|155|-1}
(*) INT
059B1406  B8 00 00 00 00                mov eax, 00H
059B140B  84 C0                         test al, al
059B140D  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+64

#604		
#605				(* Comando_caldaia := FALSE; *)
#606				MOVE		FALSE,Comando_caldaia	{LNXT:155|156|-1}
(*) BOOL
059B1414  B8 00 00 00 00                mov eax, 00H
059B1419  84 C0                         test al, al
059B141B  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q255+0

#607		
#608				(* Comando_pompa_UTA := FALSE; *)
#609				MOVE		FALSE,Comando_pompa_UTA	{LNXT:156|157|-1}
(*) BOOL
059B1422  B8 00 00 00 00                mov eax, 00H
059B1427  84 C0                         test al, al
059B1429  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q255+2

#610		
#611				(* Comando_PdC := FALSE; *)
#612				MOVE		FALSE,Comando_PdC	{LNXT:157|158|-1}
(*) BOOL
059B1430  B8 00 00 00 00                mov eax, 00H
059B1435  84 C0                         test al, al
059B1437  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q255+1

#613		
#614				(* Comando_pompa_fancoil := FALSE; *)
#615				MOVE		FALSE,Comando_pompa_fancoil	{LNXT:158|1|-1}
(*) BOOL
059B143E  B8 00 00 00 00                mov eax, 00H
059B1443  84 C0                         test al, al
059B1445  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q255+3

END_PROGRAM
**************************************************
	List program: Controllo_HVAC_estate
**************************************************

PROGRAM Controllo_HVAC_estate

        VAR
Fase : INT := 0;
Delay : eTON;
Delay1 : eTON;
Delay2 : eTON;
Delay3 : eTON;
	END_VAR

END_PROGRAM

#0		{SRC:Controllo_HVAC_estate}
#1		(*$WAITSWITCH$*)
#2		
#3		
#4			(* IF Estate_Inverno AND (CalendarOnOff OR Automatico_Manuale *)
#5			LD		CalendarOnOff	{LNXT:1|-1|-1}
(*) UNDEF
059B144C  33 C0                         xor eax, eax
059B144E  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+53

#6			OR		Automatico_Manuale	{LNXT:1|-1|-1}
(*) BOOL
059B1454  33 C9                         xor ecx, ecx
059B1456  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; %M100+1
059B145C  0B C1                         or eax, ecx

#7			AND(		Estate_Inverno	{LNXT:1|-1|-1}
(*) BOOL
059B145E  50                            push eax
059B145F  33 C0                         xor eax, eax
059B1461  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %M100+0

#8			NOT	{LNXT:1|-1|-1}
(*) BOOL
059B1467  84 C0                         test al, al
059B1469  0F 94 C0                      sete al

#9			)	{LNXT:1|-1|-1}
(*) BOOL
059B146C  8B C8                         mov ecx, eax
059B146E  58                            pop eax
059B146F  23 C1                         and eax, ecx

#10			JMPCN	$label0	{LNXT:1|3|84}
(-) BOOL
059B1471  84 C0                         test al, al
059B1473  0F 84 62 05 00 00             je 059B19DBH

#11		
#12			(* THEN *)
#13		
#14				(* Delay.PT := 20000; *)
#15				MOVE		20000,Delay.PT	{LNXT:3|4|-1}
(*) BOOL
059B1479  B8 20 4E 00 00                mov eax, 4E20H
059B147E  89 05 CC CC CC CC             mov [CCCCCCCCH], eax ; $$DATA$$+79

#16		
#17				(* Delay *)
#18				CAL		Delay	{LNXT:4|8|-1}
(*) UDINT
059B1484  50                            push eax
059B1485  BB CC CC CC CC                mov ebx, CCCCCCCCH ; $$DATA$$+74
059B148A  E8 BF EC FF FF                call 059B014EH ; $$CODE$$+334
059B148F  58                            pop eax

#19		
#20		
#21				(* CASE Fase OF *)
#22		
#23				(* 0: *)
#24				LD		Fase	{LNXT:10|-1|-1}
(*) UNDEF
059B1490  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+54

#25				EQ		0	{LNXT:10|-1|-1}
(*) INT
059B1497  3D 00 00 00 00                cmp eax, 0
059B149C  0F 94 C0                      sete al
059B149F  25 FF 00 00 00                and eax, 0FFh

#26				JMPC		$label3	{LNXT:10|11|25}
(-) BOOL
059B14A4  84 C0                         test al, al
059B14A6  90 75 5C 90 90 90             jne 059B1505H

#27		
#28				(* 1: *)
#29				LD		Fase	{LNXT:25|-1|-1}
(*) UNDEF
059B14AC  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+54

#30				EQ		1	{LNXT:25|-1|-1}
(*) INT
059B14B3  3D 01 00 00 00                cmp eax, 1
059B14B8  0F 94 C0                      sete al
059B14BB  25 FF 00 00 00                and eax, 0FFh

#31				JMPC		$label4	{LNXT:25|26|46}
(-) BOOL
059B14C0  84 C0                         test al, al
059B14C2  0F 85 AE 00 00 00             jne 059B1576H

#32		
#33				(* 2: *)
#34				LD		Fase	{LNXT:46|-1|-1}
(*) UNDEF
059B14C8  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+54

#35				EQ		2	{LNXT:46|-1|-1}
(*) INT
059B14CF  3D 02 00 00 00                cmp eax, 2
059B14D4  0F 94 C0                      sete al
059B14D7  25 FF 00 00 00                and eax, 0FFh

#36				JMPC		$label5	{LNXT:46|47|62}
(-) BOOL
059B14DC  84 C0                         test al, al
059B14DE  0F 85 71 02 00 00             jne 059B1755H

#37		
#38				(* 3: *)
#39				LD		Fase	{LNXT:62|-1|-1}
(*) UNDEF
059B14E4  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+54

#40				EQ		3	{LNXT:62|-1|-1}
(*) INT
059B14EB  3D 03 00 00 00                cmp eax, 3
059B14F0  0F 94 C0                      sete al
059B14F3  25 FF 00 00 00                and eax, 0FFh

#41				JMPC		$label6	{LNXT:62|63|1}
(-) BOOL
059B14F8  84 C0                         test al, al
059B14FA  0F 85 5B 03 00 00             jne 059B185BH

#42				JMP		$label2	{LNXT:62|63|1}
(-) BOOL
059B1500  E9 D1 04 00 00                jmp 059B19D6H

#43		
#44				(* Istruzioni di ciascun CASE: *)
#45		
#46		$label3:
#47		
#48					(* IF Blocco_PdC *)
#49					LD		Blocco_PdC	{LNXT:11|-1|-1}
(*) UNDEF
059B1505  33 C0                         xor eax, eax
059B1507  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %I255+3

#50					JMPCN	$label7	{LNXT:11|13|19}
(-) BOOL
059B150D  84 C0                         test al, al
059B150F  90 74 3E 90 90 90             je 059B1550H

#51		
#52					(* THEN *)
#53		
#54						(* Comando_pompa_fancoil := FALSE; *)
#55						MOVE		FALSE,Comando_pompa_fancoil	{LNXT:13|14|-1}
(*) BOOL
059B1515  B8 00 00 00 00                mov eax, 00H
059B151A  84 C0                         test al, al
059B151C  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q255+3

#56		
#57						(* Comando_PdC := FALSE; *)
#58						MOVE		FALSE,Comando_PdC	{LNXT:14|15|-1}
(*) BOOL
059B1523  B8 00 00 00 00                mov eax, 00H
059B1528  84 C0                         test al, al
059B152A  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q255+1

#59		
#60						(* Comando_pompa_UTA := FALSE; *)
#61						MOVE		FALSE,Comando_pompa_UTA	{LNXT:15|17|-1}
(*) BOOL
059B1531  B8 00 00 00 00                mov eax, 00H
059B1536  84 C0                         test al, al
059B1538  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q255+2

#62		
#63						(* Fase := 0; *)
#64						MOVE		0,Fase	{LNXT:17|1|-1}
(*) BOOL
059B153F  B8 00 00 00 00                mov eax, 00H
059B1544  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+54

#65						JMP		$label8	{LNXT:11|13|19}
(-) INT
059B154B  EB 24 90 90 90                jmp 059B1571H

#66		$label7:
#67		
#68					(* ELSIF Blocco_PdC *)
#69					LD		Blocco_PdC	{LNXT:19|-1|-1}
(*) UNDEF
059B1550  33 C0                         xor eax, eax
059B1552  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %I255+3

#70					NOT	{LNXT:19|-1|-1}
(*) BOOL
059B1558  84 C0                         test al, al
059B155A  0F 94 C0                      sete al

#71					JMPCN	$label8	{LNXT:19|21|1}
(-) BOOL
059B155D  84 C0                         test al, al
059B155F  90 74 0F 90 90 90             je 059B1571H

#72		
#73					(* THEN *)
#74		
#75						(* Fase := 1; *)
#76						MOVE		1,Fase	{LNXT:21|1|-1}
(*) BOOL
059B1565  B8 01 00 00 00                mov eax, 01H
059B156A  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+54

#77		
#78		$label8:
#79					(* END_IF *)
#80					JMP		$label2	{LNXT:1|1|-1}
(-) INT
059B1571  E9 60 04 00 00                jmp 059B19D6H

#81		
#82		$label4:
#83					(* Comando_pompa_fancoil := FALSE; *)
#84					MOVE		FALSE,Comando_pompa_fancoil	{LNXT:26|27|-1}
(*) INT
059B1576  B8 00 00 00 00                mov eax, 00H
059B157B  84 C0                         test al, al
059B157D  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q255+3

#85		
#86					(* Comando_PdC := TRUE; *)
#87					MOVE		TRUE,Comando_PdC	{LNXT:27|28|-1}
(*) BOOL
059B1584  B8 01 00 00 00                mov eax, 01H
059B1589  84 C0                         test al, al
059B158B  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q255+1

#88		
#89					(* Comando_pompa_UTA := FALSE; *)
#90					MOVE		FALSE,Comando_pompa_UTA	{LNXT:28|30|-1}
(*) BOOL
059B1592  B8 00 00 00 00                mov eax, 00H
059B1597  84 C0                         test al, al
059B1599  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q255+2

#91		
#92		
#93					(* IF Temp_accumulo > Temp_setpoint_estate + T_tolleranza_estate AND NOT Blocco_PdC *)
#94					LD		Blocco_PdC	{LNXT:30|-1|-1}
(*) UNDEF
059B15A0  33 C0                         xor eax, eax
059B15A2  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %I255+3

#95					NOT	{LNXT:30|-1|-1}
(*) BOOL
059B15A8  84 C0                         test al, al
059B15AA  0F 94 C0                      sete al

#96					AND(		Temp_accumulo	{LNXT:30|-1|-1}
(*) BOOL
059B15AD  50                            push eax
059B15AE  D9 05 CC CC CC CC             fld  [CCCCCCCCH] ; $$DATA$$+32

#97					GT(		Temp_setpoint_estate	{LNXT:30|-1|-1}
(*) REAL
059B15B4  81 EC 04 00 00 00             sub esp, 4
059B15BA  D9 1C 24                      fstp [esp]
059B15BD  D9 05 CC CC CC CC             fld  [CCCCCCCCH] ; %M100+200

#98					ADD		T_tolleranza_estate	{LNXT:30|-1|-1}
(*) REAL
059B15C3  D8 05 CC CC CC CC             fadd [CCCCCCCCH] ; %M100+212

#99					)	{LNXT:30|-1|-1}
(*) REAL
059B15C9  81 EC 04 00 00 00             sub esp, 4
059B15CF  D9 1C 24                      fstp [esp]
059B15D2  D9 44 24 04                   fld 4[esp]
059B15D6  D8 1C 24                      fcomp  [esp]
059B15D9  DF E0                         fnstsw ax
059B15DB  F6 C4 41                      test ah, 41h
059B15DE  0F 94 C0                      sete al 
059B15E1  25 FF 00 00 00                and eax, 0FFh
059B15E6  81 C4 08 00 00 00             add esp, 8

#100					)	{LNXT:30|-1|-1}
(*) BOOL
059B15EC  8B C8                         mov ecx, eax
059B15EE  58                            pop eax
059B15EF  23 C1                         and eax, ecx

#101					JMPCN	$label9	{LNXT:30|31|39}
(-) BOOL
059B15F1  84 C0                         test al, al
059B15F3  0F 84 BF 00 00 00             je 059B16B8H

#102		
#103					(* THEN *)
#104		
#105						(* Delay.IN:=TRUE; *)
#106						MOVE		TRUE,Delay.IN	{LNXT:31|32|-1}
(*) BOOL
059B15F9  DD C0                         ffree
059B15FB  D9 F7                         fincstp
059B15FD  B8 01 00 00 00                mov eax, 01H
059B1602  84 C0                         test al, al
059B1604  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+78

#107		
#108		
#109						(* IF Delay.Q AND Temp_accumulo < Temp_setpoint_estate + T_tolleranza_estate AND NOT Blocco_PdC *)
#110						LD		Blocco_PdC	{LNXT:32|-1|-1}
(*) UNDEF
059B160B  33 C0                         xor eax, eax
059B160D  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %I255+3

#111						NOT	{LNXT:32|-1|-1}
(*) BOOL
059B1613  84 C0                         test al, al
059B1615  0F 94 C0                      sete al

#112						AND(		Temp_accumulo	{LNXT:32|-1|-1}
(*) BOOL
059B1618  50                            push eax
059B1619  D9 05 CC CC CC CC             fld  [CCCCCCCCH] ; $$DATA$$+32

#113						LT(		Temp_setpoint_estate	{LNXT:32|-1|-1}
(*) REAL
059B161F  81 EC 04 00 00 00             sub esp, 4
059B1625  D9 1C 24                      fstp [esp]
059B1628  D9 05 CC CC CC CC             fld  [CCCCCCCCH] ; %M100+200

#114						ADD		T_tolleranza_estate	{LNXT:32|-1|-1}
(*) REAL
059B162E  D8 05 CC CC CC CC             fadd [CCCCCCCCH] ; %M100+212

#115						)	{LNXT:32|-1|-1}
(*) REAL
059B1634  81 EC 04 00 00 00             sub esp, 4
059B163A  D9 1C 24                      fstp [esp]
059B163D  D9 44 24 04                   fld 4[esp]
059B1641  D8 1C 24                      fcomp  [esp]
059B1644  DF E0                         fnstsw ax
059B1646  F6 C4 01                      test ah, 1h
059B1649  0F 95 C0                      setne al 
059B164C  25 FF 00 00 00                and eax, 0FFh
059B1651  81 C4 08 00 00 00             add esp, 8

#116						AND		Delay.Q	{LNXT:32|-1|-1}
(*) BOOL
059B1657  33 C9                         xor ecx, ecx
059B1659  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+83
059B165F  23 C1                         and eax, ecx

#117						)	{LNXT:32|-1|-1}
(*) BOOL
059B1661  8B C8                         mov ecx, eax
059B1663  58                            pop eax
059B1664  23 C1                         and eax, ecx

#118						JMPCN	$label12	{LNXT:32|33|36}
(-) BOOL
059B1666  84 C0                         test al, al
059B1668  90 74 26 90 90 90             je 059B1691H

#119		
#120						(* THEN *)
#121		
#122							(* Delay.IN:=FALSE; *)
#123							MOVE		FALSE,Delay.IN	{LNXT:33|34|-1}
(*) BOOL
059B166E  DD C0                         ffree
059B1670  D9 F7                         fincstp
059B1672  B8 00 00 00 00                mov eax, 00H
059B1677  84 C0                         test al, al
059B1679  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+78

#124		
#125							(* Fase := 3; *)
#126							MOVE		3,Fase	{LNXT:34|1|-1}
(*) BOOL
059B1680  B8 03 00 00 00                mov eax, 03H
059B1685  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+54

#127							JMP		$label13	{LNXT:32|33|36}
(-) INT
059B168C  EB 25 90 90 90                jmp 059B16B3H

#128		$label12:
#129		
#130						(* ELSE *)
#131		
#132							(* Delay.IN:=NOT Delay.Q; *)
#133							LD		Delay.Q	{LNXT:36|37|-1}
(*) UNDEF
059B1691  33 C0                         xor eax, eax
059B1693  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+83

#134							NOT	{LNXT:36|37|-1}
(*) BOOL
059B1699  84 C0                         test al, al
059B169B  0F 94 C0                      sete al

#135							ST		Delay.IN	{LNXT:36|37|-1}
(*) BOOL
059B169E  84 C0                         test al, al
059B16A0  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+78

#136		
#137							(* Fase := 1; *)
#138							MOVE		1,Fase	{LNXT:37|1|-1}
(*) BOOL
059B16A7  B8 01 00 00 00                mov eax, 01H
059B16AC  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+54

#139		
#140		$label13:
#141						(* END_IF *)
#142						JMP		$label11	{LNXT:30|31|39}
(-) INT
059B16B3  E9 98 00 00 00                jmp 059B1750H

#143		$label9:
#144		
#145					(* ELSIF Temp_accumulo < Temp_setpoint_estate + T_tolleranza_estate AND NOT Blocco_PdC *)
#146					LD		Blocco_PdC	{LNXT:39|-1|-1}
(*) UNDEF
059B16B8  33 C0                         xor eax, eax
059B16BA  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %I255+3

#147					NOT	{LNXT:39|-1|-1}
(*) BOOL
059B16C0  84 C0                         test al, al
059B16C2  0F 94 C0                      sete al

#148					AND(		Temp_accumulo	{LNXT:39|-1|-1}
(*) BOOL
059B16C5  50                            push eax
059B16C6  D9 05 CC CC CC CC             fld  [CCCCCCCCH] ; $$DATA$$+32

#149					LT(		Temp_setpoint_estate	{LNXT:39|-1|-1}
(*) REAL
059B16CC  81 EC 04 00 00 00             sub esp, 4
059B16D2  D9 1C 24                      fstp [esp]
059B16D5  D9 05 CC CC CC CC             fld  [CCCCCCCCH] ; %M100+200

#150					ADD		T_tolleranza_estate	{LNXT:39|-1|-1}
(*) REAL
059B16DB  D8 05 CC CC CC CC             fadd [CCCCCCCCH] ; %M100+212

#151					)	{LNXT:39|-1|-1}
(*) REAL
059B16E1  81 EC 04 00 00 00             sub esp, 4
059B16E7  D9 1C 24                      fstp [esp]
059B16EA  D9 44 24 04                   fld 4[esp]
059B16EE  D8 1C 24                      fcomp  [esp]
059B16F1  DF E0                         fnstsw ax
059B16F3  F6 C4 01                      test ah, 1h
059B16F6  0F 95 C0                      setne al 
059B16F9  25 FF 00 00 00                and eax, 0FFh
059B16FE  81 C4 08 00 00 00             add esp, 8

#152					)	{LNXT:39|-1|-1}
(*) BOOL
059B1704  8B C8                         mov ecx, eax
059B1706  58                            pop eax
059B1707  23 C1                         and eax, ecx

#153					JMPCN	$label10	{LNXT:39|40|42}
(-) BOOL
059B1709  84 C0                         test al, al
059B170B  90 74 26 90 90 90             je 059B1734H

#154		
#155					(* THEN *)
#156		
#157						(* Delay.IN:=FALSE; *)
#158						MOVE		FALSE,Delay.IN	{LNXT:40|41|-1}
(*) BOOL
059B1711  DD C0                         ffree
059B1713  D9 F7                         fincstp
059B1715  B8 00 00 00 00                mov eax, 00H
059B171A  84 C0                         test al, al
059B171C  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+78

#159		
#160						(* Fase := 2; *)
#161						MOVE		2,Fase	{LNXT:41|1|-1}
(*) BOOL
059B1723  B8 02 00 00 00                mov eax, 02H
059B1728  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+54

#162						JMP		$label11	{LNXT:39|40|42}
(-) INT
059B172F  EB 1F 90 90 90                jmp 059B1750H

#163		$label10:
#164		
#165					(* ELSIF Blocco_PdC *)
#166					LD		Blocco_PdC	{LNXT:42|-1|-1}
(*) UNDEF
059B1734  33 C0                         xor eax, eax
059B1736  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %I255+3

#167					JMPCN	$label11	{LNXT:42|43|1}
(-) BOOL
059B173C  84 C0                         test al, al
059B173E  90 74 0F 90 90 90             je 059B1750H

#168		
#169					(* THEN *)
#170		
#171						(* Fase := 0; *)
#172						MOVE		0,Fase	{LNXT:43|1|-1}
(*) BOOL
059B1744  B8 00 00 00 00                mov eax, 00H
059B1749  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+54

#173		
#174		$label11:
#175					(* END_IF *)
#176					JMP		$label2	{LNXT:26|1|-1}
(-) INT
059B1750  E9 81 02 00 00                jmp 059B19D6H

#177		
#178		$label5:
#179					(* Comando_pompa_fancoil := TRUE; *)
#180					MOVE		TRUE,Comando_pompa_fancoil	{LNXT:47|48|-1}
(*) INT
059B1755  B8 01 00 00 00                mov eax, 01H
059B175A  84 C0                         test al, al
059B175C  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q255+3

#181		
#182					(* Comando_PdC := TRUE; *)
#183					MOVE		TRUE,Comando_PdC	{LNXT:48|49|-1}
(*) BOOL
059B1763  B8 01 00 00 00                mov eax, 01H
059B1768  84 C0                         test al, al
059B176A  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q255+1

#184		
#185					(* Comando_pompa_UTA := FALSE; *)
#186					MOVE		FALSE,Comando_pompa_UTA	{LNXT:49|51|-1}
(*) BOOL
059B1771  B8 00 00 00 00                mov eax, 00H
059B1776  84 C0                         test al, al
059B1778  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q255+2

#187		
#188					(* Delay.IN:=TRUE; *)
#189					MOVE		TRUE,Delay.IN	{LNXT:51|52|-1}
(*) BOOL
059B177F  B8 01 00 00 00                mov eax, 01H
059B1784  84 C0                         test al, al
059B1786  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+78

#190		
#191		
#192					(* IF Delay.Q AND Temp_accumulo < Temp_setpoint_estate + T_tolleranza_estate AND NOT Blocco_PdC *)
#193					LD		Blocco_PdC	{LNXT:52|-1|-1}
(*) UNDEF
059B178D  33 C0                         xor eax, eax
059B178F  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %I255+3

#194					NOT	{LNXT:52|-1|-1}
(*) BOOL
059B1795  84 C0                         test al, al
059B1797  0F 94 C0                      sete al

#195					AND(		Temp_accumulo	{LNXT:52|-1|-1}
(*) BOOL
059B179A  50                            push eax
059B179B  D9 05 CC CC CC CC             fld  [CCCCCCCCH] ; $$DATA$$+32

#196					LT(		Temp_setpoint_estate	{LNXT:52|-1|-1}
(*) REAL
059B17A1  81 EC 04 00 00 00             sub esp, 4
059B17A7  D9 1C 24                      fstp [esp]
059B17AA  D9 05 CC CC CC CC             fld  [CCCCCCCCH] ; %M100+200

#197					ADD		T_tolleranza_estate	{LNXT:52|-1|-1}
(*) REAL
059B17B0  D8 05 CC CC CC CC             fadd [CCCCCCCCH] ; %M100+212

#198					)	{LNXT:52|-1|-1}
(*) REAL
059B17B6  81 EC 04 00 00 00             sub esp, 4
059B17BC  D9 1C 24                      fstp [esp]
059B17BF  D9 44 24 04                   fld 4[esp]
059B17C3  D8 1C 24                      fcomp  [esp]
059B17C6  DF E0                         fnstsw ax
059B17C8  F6 C4 01                      test ah, 1h
059B17CB  0F 95 C0                      setne al 
059B17CE  25 FF 00 00 00                and eax, 0FFh
059B17D3  81 C4 08 00 00 00             add esp, 8

#199					AND		Delay.Q	{LNXT:52|-1|-1}
(*) BOOL
059B17D9  33 C9                         xor ecx, ecx
059B17DB  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+83
059B17E1  23 C1                         and eax, ecx

#200					)	{LNXT:52|-1|-1}
(*) BOOL
059B17E3  8B C8                         mov ecx, eax
059B17E5  58                            pop eax
059B17E6  23 C1                         and eax, ecx

#201					JMPCN	$label14	{LNXT:52|53|55}
(-) BOOL
059B17E8  84 C0                         test al, al
059B17EA  90 74 26 90 90 90             je 059B1813H

#202		
#203					(* THEN *)
#204		
#205						(* Delay.IN:=FALSE; *)
#206						MOVE		FALSE,Delay.IN	{LNXT:53|54|-1}
(*) BOOL
059B17F0  DD C0                         ffree
059B17F2  D9 F7                         fincstp
059B17F4  B8 00 00 00 00                mov eax, 00H
059B17F9  84 C0                         test al, al
059B17FB  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+78

#207		
#208						(* Fase := 3; *)
#209						MOVE		3,Fase	{LNXT:54|1|-1}
(*) BOOL
059B1802  B8 03 00 00 00                mov eax, 03H
059B1807  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+54

#210						JMP		$label16	{LNXT:52|53|55}
(-) INT
059B180E  EB 46 90 90 90                jmp 059B1856H

#211		$label14:
#212		
#213					(* ELSIF Blocco_PdC *)
#214					LD		Blocco_PdC	{LNXT:55|-1|-1}
(*) UNDEF
059B1813  33 C0                         xor eax, eax
059B1815  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %I255+3

#215					JMPCN	$label15	{LNXT:55|56|58}
(-) BOOL
059B181B  84 C0                         test al, al
059B181D  90 74 14 90 90 90             je 059B1834H

#216		
#217					(* THEN *)
#218		
#219						(* Fase := 0; *)
#220						MOVE		0,Fase	{LNXT:56|1|-1}
(*) BOOL
059B1823  B8 00 00 00 00                mov eax, 00H
059B1828  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+54

#221						JMP		$label16	{LNXT:55|56|58}
(-) INT
059B182F  EB 25 90 90 90                jmp 059B1856H

#222		$label15:
#223		
#224					(* ELSE *)
#225		
#226						(* Delay.IN:=NOT Delay.Q; *)
#227						LD		Delay.Q	{LNXT:58|59|-1}
(*) UNDEF
059B1834  33 C0                         xor eax, eax
059B1836  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+83

#228						NOT	{LNXT:58|59|-1}
(*) BOOL
059B183C  84 C0                         test al, al
059B183E  0F 94 C0                      sete al

#229						ST		Delay.IN	{LNXT:58|59|-1}
(*) BOOL
059B1841  84 C0                         test al, al
059B1843  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+78

#230		
#231						(* Fase :=2; *)
#232						MOVE		2,Fase	{LNXT:59|1|-1}
(*) BOOL
059B184A  B8 02 00 00 00                mov eax, 02H
059B184F  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+54

#233		
#234		$label16:
#235					(* END_IF *)
#236					JMP		$label2	{LNXT:47|58|-1}
(-) INT
059B1856  E9 7B 01 00 00                jmp 059B19D6H

#237		
#238		$label6:
#239					(* Comando_pompa_fancoil := TRUE; *)
#240					MOVE		TRUE,Comando_pompa_fancoil	{LNXT:63|64|-1}
(*) INT
059B185B  B8 01 00 00 00                mov eax, 01H
059B1860  84 C0                         test al, al
059B1862  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q255+3

#241		
#242					(* Comando_PdC := TRUE; *)
#243					MOVE		TRUE,Comando_PdC	{LNXT:64|65|-1}
(*) BOOL
059B1869  B8 01 00 00 00                mov eax, 01H
059B186E  84 C0                         test al, al
059B1870  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q255+1

#244		
#245					(* Comando_pompa_UTA := TRUE; *)
#246					MOVE		TRUE,Comando_pompa_UTA	{LNXT:65|67|-1}
(*) BOOL
059B1877  B8 01 00 00 00                mov eax, 01H
059B187C  84 C0                         test al, al
059B187E  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q255+2

#247		
#248					(* Delay.IN := TRUE; *)
#249					MOVE		TRUE,Delay.IN	{LNXT:67|68|-1}
(*) BOOL
059B1885  B8 01 00 00 00                mov eax, 01H
059B188A  84 C0                         test al, al
059B188C  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+78

#250		
#251		
#252					(* IF Temp_accumulo < Temp_setpoint_estate + T_tolleranza_estate AND NOT Blocco_PdC *)
#253					LD		Blocco_PdC	{LNXT:68|-1|-1}
(*) UNDEF
059B1893  33 C0                         xor eax, eax
059B1895  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %I255+3

#254					NOT	{LNXT:68|-1|-1}
(*) BOOL
059B189B  84 C0                         test al, al
059B189D  0F 94 C0                      sete al

#255					AND(		Temp_accumulo	{LNXT:68|-1|-1}
(*) BOOL
059B18A0  50                            push eax
059B18A1  D9 05 CC CC CC CC             fld  [CCCCCCCCH] ; $$DATA$$+32

#256					LT(		Temp_setpoint_estate	{LNXT:68|-1|-1}
(*) REAL
059B18A7  81 EC 04 00 00 00             sub esp, 4
059B18AD  D9 1C 24                      fstp [esp]
059B18B0  D9 05 CC CC CC CC             fld  [CCCCCCCCH] ; %M100+200

#257					ADD		T_tolleranza_estate	{LNXT:68|-1|-1}
(*) REAL
059B18B6  D8 05 CC CC CC CC             fadd [CCCCCCCCH] ; %M100+212

#258					)	{LNXT:68|-1|-1}
(*) REAL
059B18BC  81 EC 04 00 00 00             sub esp, 4
059B18C2  D9 1C 24                      fstp [esp]
059B18C5  D9 44 24 04                   fld 4[esp]
059B18C9  D8 1C 24                      fcomp  [esp]
059B18CC  DF E0                         fnstsw ax
059B18CE  F6 C4 01                      test ah, 1h
059B18D1  0F 95 C0                      setne al 
059B18D4  25 FF 00 00 00                and eax, 0FFh
059B18D9  81 C4 08 00 00 00             add esp, 8

#259					)	{LNXT:68|-1|-1}
(*) BOOL
059B18DF  8B C8                         mov ecx, eax
059B18E1  58                            pop eax
059B18E2  23 C1                         and eax, ecx

#260					JMPCN	$label17	{LNXT:68|69|71}
(-) BOOL
059B18E4  84 C0                         test al, al
059B18E6  90 74 2E 90 90 90             je 059B1917H

#261		
#262					(* THEN *)
#263		
#264						(* Delay.IN := NOT Delay.Q; *)
#265						LD		Delay.Q	{LNXT:69|70|-1}
(*) UNDEF
059B18EC  DD C0                         ffree
059B18EE  D9 F7                         fincstp
059B18F0  33 C0                         xor eax, eax
059B18F2  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+83

#266						NOT	{LNXT:69|70|-1}
(*) BOOL
059B18F8  84 C0                         test al, al
059B18FA  0F 94 C0                      sete al

#267						ST		Delay.IN	{LNXT:69|70|-1}
(*) BOOL
059B18FD  84 C0                         test al, al
059B18FF  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+78

#268		
#269						(* Fase := 3; *)
#270						MOVE		3,Fase	{LNXT:70|1|-1}
(*) BOOL
059B1906  B8 03 00 00 00                mov eax, 03H
059B190B  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+54

#271						JMP		$label20	{LNXT:68|69|71}
(-) INT
059B1912  E9 BF 00 00 00                jmp 059B19D6H

#272		$label17:
#273		
#274					(* ELSIF Temp_accumulo > Temp_setpoint_estate + T_tolleranza_estate AND NOT Blocco_PdC *)
#275					LD		Blocco_PdC	{LNXT:71|-1|-1}
(*) UNDEF
059B1917  33 C0                         xor eax, eax
059B1919  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %I255+3

#276					NOT	{LNXT:71|-1|-1}
(*) BOOL
059B191F  84 C0                         test al, al
059B1921  0F 94 C0                      sete al

#277					AND(		Temp_accumulo	{LNXT:71|-1|-1}
(*) BOOL
059B1924  50                            push eax
059B1925  D9 05 CC CC CC CC             fld  [CCCCCCCCH] ; $$DATA$$+32

#278					GT(		Temp_setpoint_estate	{LNXT:71|-1|-1}
(*) REAL
059B192B  81 EC 04 00 00 00             sub esp, 4
059B1931  D9 1C 24                      fstp [esp]
059B1934  D9 05 CC CC CC CC             fld  [CCCCCCCCH] ; %M100+200

#279					ADD		T_tolleranza_estate	{LNXT:71|-1|-1}
(*) REAL
059B193A  D8 05 CC CC CC CC             fadd [CCCCCCCCH] ; %M100+212

#280					)	{LNXT:71|-1|-1}
(*) REAL
059B1940  81 EC 04 00 00 00             sub esp, 4
059B1946  D9 1C 24                      fstp [esp]
059B1949  D9 44 24 04                   fld 4[esp]
059B194D  D8 1C 24                      fcomp  [esp]
059B1950  DF E0                         fnstsw ax
059B1952  F6 C4 41                      test ah, 41h
059B1955  0F 94 C0                      sete al 
059B1958  25 FF 00 00 00                and eax, 0FFh
059B195D  81 C4 08 00 00 00             add esp, 8

#281					)	{LNXT:71|-1|-1}
(*) BOOL
059B1963  8B C8                         mov ecx, eax
059B1965  58                            pop eax
059B1966  23 C1                         and eax, ecx

#282					JMPCN	$label18	{LNXT:71|72|74}
(-) BOOL
059B1968  84 C0                         test al, al
059B196A  90 74 2E 90 90 90             je 059B199BH

#283		
#284					(* THEN *)
#285		
#286						(* Delay.IN := NOT Delay.Q; *)
#287						LD		Delay.Q	{LNXT:72|73|-1}
(*) UNDEF
059B1970  DD C0                         ffree
059B1972  D9 F7                         fincstp
059B1974  33 C0                         xor eax, eax
059B1976  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+83

#288						NOT	{LNXT:72|73|-1}
(*) BOOL
059B197C  84 C0                         test al, al
059B197E  0F 94 C0                      sete al

#289						ST		Delay.IN	{LNXT:72|73|-1}
(*) BOOL
059B1981  84 C0                         test al, al
059B1983  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+78

#290		
#291						(* Fase := 3; *)
#292						MOVE		3,Fase	{LNXT:73|1|-1}
(*) BOOL
059B198A  B8 03 00 00 00                mov eax, 03H
059B198F  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+54

#293						JMP		$label20	{LNXT:71|72|74}
(-) INT
059B1996  EB 3E 90 90 90                jmp 059B19D6H

#294		$label18:
#295		
#296					(* ELSIF Blocco_PdC *)
#297					LD		Blocco_PdC	{LNXT:74|-1|-1}
(*) UNDEF
059B199B  33 C0                         xor eax, eax
059B199D  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %I255+3

#298					JMPCN	$label19	{LNXT:74|75|77}
(-) BOOL
059B19A3  84 C0                         test al, al
059B19A5  90 74 14 90 90 90             je 059B19BCH

#299		
#300					(* THEN *)
#301		
#302						(* Fase := 0; *)
#303						MOVE		0,Fase	{LNXT:75|1|-1}
(*) BOOL
059B19AB  B8 00 00 00 00                mov eax, 00H
059B19B0  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+54

#304						JMP		$label20	{LNXT:74|75|77}
(-) INT
059B19B7  EB 1D 90 90 90                jmp 059B19D6H

#305		$label19:
#306		
#307					(* ELSE *)
#308		
#309						(* Fase := 3; *)
#310						MOVE		3,Fase	{LNXT:77|78|-1}
(*) INT
059B19BC  B8 03 00 00 00                mov eax, 03H
059B19C1  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+54

#311		
#312						(* Delay.IN := FALSE; *)
#313						MOVE		FALSE,Delay.IN	{LNXT:78|1|-1}
(*) INT
059B19C8  B8 00 00 00 00                mov eax, 00H
059B19CD  84 C0                         test al, al
059B19CF  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+78

#314		
#315		$label20:
#316					(* END_IF *)
#317		
#318		$label2:
#319		
#320				(* END_CASE *)
#321				JMP		$label1	{LNXT:1|3|84}
(-) BOOL
059B19D6  EB 66 90 90 90                jmp 059B1A3EH

#322		$label0:
#323		
#324			(* ELSIF CalendarOnOff XOR Estate_Inverno *)
#325			LD		CalendarOnOff	{LNXT:84|-1|-1}
(*) UNDEF
059B19DB  33 C0                         xor eax, eax
059B19DD  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+53

#326			NOT	{LNXT:84|-1|-1}
(*) BOOL
059B19E3  84 C0                         test al, al
059B19E5  0F 94 C0                      sete al

#327			XOR		Estate_Inverno	{LNXT:84|-1|-1}
(*) BOOL
059B19E8  33 C9                         xor ecx, ecx
059B19EA  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; %M100+0
059B19F0  33 C1                         xor eax, ecx

#328			JMPCN	$label1	{LNXT:84|85|1}
(-) BOOL
059B19F2  84 C0                         test al, al
059B19F4  90 74 47 90 90 90             je 059B1A3EH

#329		
#330			(* THEN *)
#331		
#332				(* Fase :=0; *)
#333				MOVE		0,Fase	{LNXT:85|86|-1}
(*) BOOL
059B19FA  B8 00 00 00 00                mov eax, 00H
059B19FF  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+54

#334		
#335				(* Delay.IN:=FALSE; *)
#336				MOVE		FALSE,Delay.IN	{LNXT:86|87|-1}
(*) INT
059B1A06  B8 00 00 00 00                mov eax, 00H
059B1A0B  84 C0                         test al, al
059B1A0D  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+78

#337		
#338				(* Comando_pompa_UTA := FALSE; *)
#339				MOVE		FALSE,Comando_pompa_UTA	{LNXT:87|88|-1}
(*) BOOL
059B1A14  B8 00 00 00 00                mov eax, 00H
059B1A19  84 C0                         test al, al
059B1A1B  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q255+2

#340		
#341				(* Comando_PdC := FALSE; *)
#342				MOVE		FALSE,Comando_PdC	{LNXT:88|89|-1}
(*) BOOL
059B1A22  B8 00 00 00 00                mov eax, 00H
059B1A27  84 C0                         test al, al
059B1A29  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q255+1

#343		
#344				(* Comando_pompa_fancoil := FALSE; *)
#345				MOVE		FALSE,Comando_pompa_fancoil	{LNXT:89|1|-1}
(*) BOOL
059B1A30  B8 00 00 00 00                mov eax, 00H
059B1A35  84 C0                         test al, al
059B1A37  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q255+3

END_PROGRAM
**************************************************
	List program: Preaccensione
**************************************************

PROGRAM Preaccensione

        VAR
Set : R_TRIG;
signal_on : BOOL;
signal_off : BOOL;
inizio : UDINT := 0;
Stop : F_TRIG;
fine : UDINT;
	END_VAR

END_PROGRAM

#0		{SRC:Preaccensione}
#1		(*$WAITSWITCH$*)
#2		
#3			(* Set *)
#4			MOVE		signal_on,Set.CLK	{LNXT:1|-1|-1}
(*) UDINT
059B1A3E  33 C0                         xor eax, eax
059B1A40  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+88
059B1A46  84 C0                         test al, al
059B1A48  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+90

#5			CAL		Set	{LNXT:1|3|-1}
(*) BOOL
059B1A4F  50                            push eax
059B1A50  BB CC CC CC CC                mov ebx, CCCCCCCCH ; $$DATA$$+89
059B1A55  E8 CD E6 FF FF                call 059B0127H ; $$CODE$$+295
059B1A5A  58                            pop eax

#6		
#7		
#8			(* IF Set.Q) AND Abilita_preaccensione *)
#9			LD		Set.Q	{LNXT:3|-1|-1}
(*) UNDEF
059B1A5B  33 C0                         xor eax, eax
059B1A5D  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+91

#10			AND		Abilita_preaccensione	{LNXT:3|-1|-1}
(*) BOOL
059B1A63  33 C9                         xor ecx, ecx
059B1A65  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+92
059B1A6B  23 C1                         and eax, ecx

#11			JMPCN	$label0	{LNXT:3|5|9}
(-) BOOL
059B1A6D  84 C0                         test al, al
059B1A6F  90 74 0F 90 90 90             je 059B1A81H

#12		
#13			(* THEN *)
#14		
#15				(* inizio := SysTime; *)
#16				MOVE		SysTime,inizio	{LNXT:5|9|-1}
(*) BOOL
059B1A75  8B 05 CC CC CC CC             mov eax, [CCCCCCCCH] ; %M0+320
059B1A7B  89 05 CC CC CC CC             mov [CCCCCCCCH], eax ; $$DATA$$+96

#17		
#18		$label0:
#19			(* END_IF *)
#20		
#21			(* Stop *)
#22			MOVE		signal_on,Stop.CLK	{LNXT:9|-1|-1}
(*) UDINT
059B1A81  33 C0                         xor eax, eax
059B1A83  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+88
059B1A89  84 C0                         test al, al
059B1A8B  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+101

#23			CAL		Stop	{LNXT:9|11|-1}
(*) BOOL
059B1A92  50                            push eax
059B1A93  BB CC CC CC CC                mov ebx, CCCCCCCCH ; $$DATA$$+100
059B1A98  E8 63 E6 FF FF                call 059B0100H ; $$CODE$$+256
059B1A9D  58                            pop eax

#24		
#25		
#26			(* IF Abilita_preaccensione AND (Stop.Q *)
#27			LD		Abilita_preaccensione	{LNXT:11|-1|-1}
(*) UNDEF
059B1A9E  33 C0                         xor eax, eax
059B1AA0  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+92

#28			AND		Stop.Q	{LNXT:11|-1|-1}
(*) BOOL
059B1AA6  33 C9                         xor ecx, ecx
059B1AA8  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+102
059B1AAE  23 C1                         and eax, ecx

#29			JMPCN	$label1	{LNXT:11|13|17}
(-) BOOL
059B1AB0  84 C0                         test al, al
059B1AB2  90 74 0F 90 90 90             je 059B1AC4H

#30		
#31			(* THEN *)
#32		
#33				(* fine := SysTime; *)
#34				MOVE		SysTime,fine	{LNXT:13|17|-1}
(*) BOOL
059B1AB8  8B 05 CC CC CC CC             mov eax, [CCCCCCCCH] ; %M0+320
059B1ABE  89 05 CC CC CC CC             mov [CCCCCCCCH], eax ; $$DATA$$+104

#35		
#36		$label1:
#37			(* END_IF *)
#38		
#39			(* ms_preaccensione := (fine-inizio); *)
#40			LD		fine	{LNXT:17|1|-1}
(*) UNDEF
059B1AC4  8B 05 CC CC CC CC             mov eax, [CCCCCCCCH] ; $$DATA$$+104

#41			SUB		inizio	{LNXT:17|1|-1}
(*) UDINT
059B1ACA  2B 05 CC CC CC CC             sub eax, [CCCCCCCCH] ; $$DATA$$+96

#42			ST		ms_preaccensione	{LNXT:17|1|-1}
(*) UDINT
059B1AD0  89 05 CC CC CC CC             mov [CCCCCCCCH], eax ; $$DATA$$+108

059B1AD6  61                            popad
059B1AD7  5D                            pop ebp

059B1AD8  C3                            ret

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
059B1AD9  C3                            ret


*** OUTPUT:
059B1ADA  C3                            ret



**************************************************
	Task Slow init code
**************************************************

059B1ADB  55                            push ebp
059B1ADC  8B EC                         mov ebp, esp

059B1ADE  8B E5                         mov esp, ebp
059B1AE0  5D                            pop ebp

059B1AE1  C3                            ret

**************************************************
	List program: UpdateOrologio
**************************************************

PROGRAM UpdateOrologio

        VAR
Datetime : LINT;
tset : LINT;
time : LINT;
Default : SysETimeToDate;
Done : BOOL;
Error : BOOL;
YY : UINT;
MM : INT;
DD : INT;
dd : INT;
hh : INT;
mm : INT;
ss : INT;
A : OnOffCalendar;
OnOffCalendar : OnOffCalendar;
onoff : OnOffCalendar;
Lunedi : HHMM_to_MM;
Martedi : HHMM_to_MM;
Mercoledi : HHMM_to_MM;
Giovedi : HHMM_to_MM;
Venerdi : HHMM_to_MM;
Sabato : HHMM_to_MM;
Domenica : HHMM_to_MM;
	END_VAR

END_PROGRAM

059B1AF0  55                            push ebp
059B1AF1  8B EC                         mov ebp, esp
059B1AF3  60                            pushad

#0		{SRC:UpdateOrologio}
#1		
#2		
#3		
#4		(*** Network 1 ***)
#5		
#6		(* Call for FB SysETimeToDate instance Default *)
#7		MOVE	SysDateTime,Default.EpochTime	{R:"1$FB:Default"}
(*) UDINT
059B1AF4  8B 05 CC CC CC CC             mov eax, [CCCCCCCCH] ; %M1+256
059B1AFA  89 05 CC CC CC CC             mov [CCCCCCCCH], eax ; $$DATA$$+117

#8		CAL	Default	{R:"1$FB:Default"}
(*) UDINT
059B1B00  50                            push eax
059B1B01  68 CC CC CC CC                push CCCCCCCCH ; $$DATA$$+112
059B1B06  B9 CC CC CC CC                mov ecx, CCCCCCCCH ; SysETimeToDate
059B1B0B  FF D1                         call ecx
059B1B0D  81 C4 04 00 00 00             add esp, 4
059B1B13  58                            pop eax

#9		MOVE	Default.Done,Done	{R:"1$FB:Default"}
(*) UDINT
059B1B14  33 C0                         xor eax, eax
059B1B16  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+121
059B1B1C  84 C0                         test al, al
059B1B1E  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+103

#10		MOVE	Default.Fault,Error	{R:"1$FB:Default"}
(*) BOOL
059B1B25  33 C0                         xor eax, eax
059B1B27  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+122
059B1B2D  84 C0                         test al, al
059B1B2F  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+93

#11		MOVE	Default.Year,YY	{R:"1$FB:Default"}
(*) BOOL
059B1B36  33 C0                         xor eax, eax
059B1B38  66 8B 05 CC CC CC CC          mov ax, [CCCCCCCCH] ; $$DATA$$+123
059B1B3F  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+94

#12		MOVE	Default.Month,MM	{R:"1$FB:Default"}
(*) UINT
059B1B46  33 C0                         xor eax, eax
059B1B48  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+125
059B1B4E  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+132

#13		MOVE	Default.Second,ss	{R:"1$FB:Default"}
(*) USINT
059B1B55  33 C0                         xor eax, eax
059B1B57  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+130
059B1B5D  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+134

#14		
#15		(* Call for function TO_INT *)
#16		LD	Default.Day	{R:"1$F:7"}
(*) UNDEF
059B1B64  33 C0                         xor eax, eax
059B1B66  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+126

#17		TO_INT	{R:"1$F:7"}
(*) USINT
#18		ST	Giorno	{R:"1$F:7"}
(*) INT
059B1B6C  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+136

#19		
#20		(* Call for function TO_INT *)
#21		LD	Default.WeekDay	{R:"1$F:9"}
(*) UNDEF
059B1B73  33 C0                         xor eax, eax
059B1B75  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+127

#22		TO_INT	{R:"1$F:9"}
(*) USINT
#23		ST	DayWeek	{R:"1$F:9"}
(*) INT
059B1B7B  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+138

#24		
#25		(* Call for function TO_INT *)
#26		LD	Default.Hour	{R:"1$F:11"}
(*) UNDEF
059B1B82  33 C0                         xor eax, eax
059B1B84  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+128

#27		TO_INT	{R:"1$F:11"}
(*) USINT
#28		ST	Ora	{R:"1$F:11"}
(*) INT
059B1B8A  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+140

#29		
#30		(* Call for function TO_INT *)
#31		LD	Default.Minute	{R:"1$F:13"}
(*) UNDEF
059B1B91  33 C0                         xor eax, eax
059B1B93  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+129

#32		TO_INT	{R:"1$F:13"}
(*) USINT
#33		ST	Minuto	{R:"1$F:13"}
(*) INT
059B1B99  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+142

#34		
#35		
#36		
#37		
#38		(*** Network 2 ***)
#39		
#40		(* Call for FB HHMM_to_MM instance Lunedi *)
#41		MOVE	Ora_on1_lun,Lunedi.HH_on1	{R:"2$FB:Lunedi"}
(*) INT
059B1BA0  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; %M100+0
059B1BA7  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+144

#42		MOVE	Min_on1_lun,Lunedi.MM_on1	{R:"2$FB:Lunedi"}
(*) INT
059B1BAE  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; %M100+2
059B1BB5  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+146

#43		MOVE	Ora_off1_lun,Lunedi.HH_off1	{R:"2$FB:Lunedi"}
(*) INT
059B1BBC  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; %M100+4
059B1BC3  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+148

#44		MOVE	Min_off1_lun,Lunedi.MM_off1	{R:"2$FB:Lunedi"}
(*) INT
059B1BCA  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; %M100+6
059B1BD1  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+150

#45		MOVE	Ora_on2_lun,Lunedi.HH_on2	{R:"2$FB:Lunedi"}
(*) INT
059B1BD8  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; %M100+8
059B1BDF  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+152

#46		MOVE	Min_on2_lun,Lunedi.MM_on2	{R:"2$FB:Lunedi"}
(*) INT
059B1BE6  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; %M100+10
059B1BED  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+154

#47		MOVE	Ora_off2_lun,Lunedi.HH_off2	{R:"2$FB:Lunedi"}
(*) INT
059B1BF4  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; %M100+12
059B1BFB  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+156

#48		MOVE	Min_off2_lun,Lunedi.MM_off2	{R:"2$FB:Lunedi"}
(*) INT
059B1C02  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; %M100+14
059B1C09  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+158

#49		CAL	Lunedi	{R:"2$FB:Lunedi"}
(*) INT
059B1C10  50                            push eax
059B1C11  BB CC CC CC CC                mov ebx, CCCCCCCCH ; $$DATA$$+144
059B1C16  E8 D1 E5 FF FF                call 059B01ECH ; $$CODE$$+492
059B1C1B  58                            pop eax

#50		MOVE	Lunedi.MMs_on1,P11On	{R:"2$FB:Lunedi"}
(*) INT
059B1C1C  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+160
059B1C23  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+168

#51		MOVE	Lunedi.MMs_off1,P12Off	{R:"2$FB:Lunedi"}
(*) INT
059B1C2A  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+162
059B1C31  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+170

#52		MOVE	Lunedi.MMs_on2,P13On	{R:"2$FB:Lunedi"}
(*) INT
059B1C38  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+164
059B1C3F  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+172

#53		MOVE	Lunedi.MMs_off2,P14Off	{R:"2$FB:Lunedi"}
(*) INT
059B1C46  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+166
059B1C4D  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+174

#54		
#55		
#56		
#57		
#58		(*** Network 3 ***)
#59		
#60		(* Call for FB HHMM_to_MM instance Martedi *)
#61		MOVE	Ora_on1_mar,Martedi.HH_on1	{R:"3$FB:Martedi"}
(*) INT
059B1C54  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; %M100+16
059B1C5B  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+176

#62		MOVE	Min_on1_mar,Martedi.MM_on1	{R:"3$FB:Martedi"}
(*) INT
059B1C62  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; %M100+18
059B1C69  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+178

#63		MOVE	Ora_off1_mar,Martedi.HH_off1	{R:"3$FB:Martedi"}
(*) INT
059B1C70  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; %M100+20
059B1C77  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+180

#64		MOVE	Min_off1_mar,Martedi.MM_off1	{R:"3$FB:Martedi"}
(*) INT
059B1C7E  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; %M100+22
059B1C85  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+182

#65		MOVE	Ora_on2_mar,Martedi.HH_on2	{R:"3$FB:Martedi"}
(*) INT
059B1C8C  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; %M100+24
059B1C93  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+184

#66		MOVE	Min_on2_mar,Martedi.MM_on2	{R:"3$FB:Martedi"}
(*) INT
059B1C9A  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; %M100+26
059B1CA1  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+186

#67		MOVE	Ora_off2_mar,Martedi.HH_off2	{R:"3$FB:Martedi"}
(*) INT
059B1CA8  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; %M100+28
059B1CAF  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+188

#68		MOVE	Min_off2_mar,Martedi.MM_off2	{R:"3$FB:Martedi"}
(*) INT
059B1CB6  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; %M100+30
059B1CBD  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+190

#69		CAL	Martedi	{R:"3$FB:Martedi"}
(*) INT
059B1CC4  50                            push eax
059B1CC5  BB CC CC CC CC                mov ebx, CCCCCCCCH ; $$DATA$$+176
059B1CCA  E8 1D E5 FF FF                call 059B01ECH ; $$CODE$$+492
059B1CCF  58                            pop eax

#70		MOVE	Martedi.MMs_on1,P21On	{R:"3$FB:Martedi"}
(*) INT
059B1CD0  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+192
059B1CD7  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+200

#71		MOVE	Martedi.MMs_off1,P22Off	{R:"3$FB:Martedi"}
(*) INT
059B1CDE  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+194
059B1CE5  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+202

#72		MOVE	Martedi.MMs_on2,P23On	{R:"3$FB:Martedi"}
(*) INT
059B1CEC  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+196
059B1CF3  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+204

#73		MOVE	Martedi.MMs_off2,P24Off	{R:"3$FB:Martedi"}
(*) INT
059B1CFA  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+198
059B1D01  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+206

#74		
#75		
#76		
#77		
#78		(*** Network 4 ***)
#79		
#80		(* Call for FB HHMM_to_MM instance Mercoledi *)
#81		MOVE	Ora_on1_mer,Mercoledi.HH_on1	{R:"4$FB:Mercoledi"}
(*) INT
059B1D08  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; %M100+32
059B1D0F  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+208

#82		MOVE	Min_on1_mer,Mercoledi.MM_on1	{R:"4$FB:Mercoledi"}
(*) INT
059B1D16  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; %M100+34
059B1D1D  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+210

#83		MOVE	Ora_off1_mer,Mercoledi.HH_off1	{R:"4$FB:Mercoledi"}
(*) INT
059B1D24  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; %M100+36
059B1D2B  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+212

#84		MOVE	Min_off1_mer,Mercoledi.MM_off1	{R:"4$FB:Mercoledi"}
(*) INT
059B1D32  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; %M100+38
059B1D39  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+214

#85		MOVE	Ora_on2_mer,Mercoledi.HH_on2	{R:"4$FB:Mercoledi"}
(*) INT
059B1D40  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; %M100+40
059B1D47  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+216

#86		MOVE	Min_on2_mer,Mercoledi.MM_on2	{R:"4$FB:Mercoledi"}
(*) INT
059B1D4E  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; %M100+42
059B1D55  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+218

#87		MOVE	Ora_off2_mer,Mercoledi.HH_off2	{R:"4$FB:Mercoledi"}
(*) INT
059B1D5C  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; %M100+44
059B1D63  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+220

#88		MOVE	Min_off2_mer,Mercoledi.MM_off2	{R:"4$FB:Mercoledi"}
(*) INT
059B1D6A  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; %M100+46
059B1D71  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+222

#89		CAL	Mercoledi	{R:"4$FB:Mercoledi"}
(*) INT
059B1D78  50                            push eax
059B1D79  BB CC CC CC CC                mov ebx, CCCCCCCCH ; $$DATA$$+208
059B1D7E  E8 69 E4 FF FF                call 059B01ECH ; $$CODE$$+492
059B1D83  58                            pop eax

#90		MOVE	Mercoledi.MMs_on1,P31On	{R:"4$FB:Mercoledi"}
(*) INT
059B1D84  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+224
059B1D8B  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+232

#91		MOVE	Mercoledi.MMs_off1,P32Off	{R:"4$FB:Mercoledi"}
(*) INT
059B1D92  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+226
059B1D99  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+234

#92		MOVE	Mercoledi.MMs_on2,P33On	{R:"4$FB:Mercoledi"}
(*) INT
059B1DA0  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+228
059B1DA7  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+236

#93		MOVE	Mercoledi.MMs_off2,P34Off	{R:"4$FB:Mercoledi"}
(*) INT
059B1DAE  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+230
059B1DB5  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+238

#94		
#95		
#96		
#97		
#98		(*** Network 5 ***)
#99		
#100		(* Call for FB HHMM_to_MM instance Giovedi *)
#101		MOVE	Ora_on1_gio,Giovedi.HH_on1	{R:"5$FB:Giovedi"}
(*) INT
059B1DBC  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; %M100+48
059B1DC3  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+240

#102		MOVE	Min_on1_gio,Giovedi.MM_on1	{R:"5$FB:Giovedi"}
(*) INT
059B1DCA  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; %M100+50
059B1DD1  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+242

#103		MOVE	Ora_off1_gio,Giovedi.HH_off1	{R:"5$FB:Giovedi"}
(*) INT
059B1DD8  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; %M100+52
059B1DDF  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+244

#104		MOVE	Min_off1_gio,Giovedi.MM_off1	{R:"5$FB:Giovedi"}
(*) INT
059B1DE6  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; %M100+54
059B1DED  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+246

#105		MOVE	Ora_on2_gio,Giovedi.HH_on2	{R:"5$FB:Giovedi"}
(*) INT
059B1DF4  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; %M100+56
059B1DFB  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+248

#106		MOVE	Min_on2_gio,Giovedi.MM_on2	{R:"5$FB:Giovedi"}
(*) INT
059B1E02  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; %M100+58
059B1E09  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+250

#107		MOVE	Ora_off2_gio,Giovedi.HH_off2	{R:"5$FB:Giovedi"}
(*) INT
059B1E10  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; %M100+60
059B1E17  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+252

#108		MOVE	Min_off2_gio,Giovedi.MM_off2	{R:"5$FB:Giovedi"}
(*) INT
059B1E1E  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; %M100+62
059B1E25  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+254

#109		CAL	Giovedi	{R:"5$FB:Giovedi"}
(*) INT
059B1E2C  50                            push eax
059B1E2D  BB CC CC CC CC                mov ebx, CCCCCCCCH ; $$DATA$$+240
059B1E32  E8 B5 E3 FF FF                call 059B01ECH ; $$CODE$$+492
059B1E37  58                            pop eax

#110		MOVE	Giovedi.MMs_on1,P41On	{R:"5$FB:Giovedi"}
(*) INT
059B1E38  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+256
059B1E3F  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+264

#111		MOVE	Giovedi.MMs_off1,P42Off	{R:"5$FB:Giovedi"}
(*) INT
059B1E46  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+258
059B1E4D  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+266

#112		MOVE	Giovedi.MMs_on2,P43On	{R:"5$FB:Giovedi"}
(*) INT
059B1E54  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+260
059B1E5B  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+268

#113		MOVE	Giovedi.MMs_off2,P44Off	{R:"5$FB:Giovedi"}
(*) INT
059B1E62  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+262
059B1E69  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+270

#114		
#115		
#116		
#117		
#118		(*** Network 6 ***)
#119		
#120		(* Call for FB HHMM_to_MM instance Venerdi *)
#121		MOVE	Ora_on1_ven,Venerdi.HH_on1	{R:"6$FB:Venerdi"}
(*) INT
059B1E70  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; %M100+64
059B1E77  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+272

#122		MOVE	Min_on1_ven,Venerdi.MM_on1	{R:"6$FB:Venerdi"}
(*) INT
059B1E7E  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; %M100+66
059B1E85  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+274

#123		MOVE	Ora_off1_ven,Venerdi.HH_off1	{R:"6$FB:Venerdi"}
(*) INT
059B1E8C  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; %M100+68
059B1E93  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+276

#124		MOVE	Min_off1_ven,Venerdi.MM_off1	{R:"6$FB:Venerdi"}
(*) INT
059B1E9A  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; %M100+70
059B1EA1  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+278

#125		MOVE	Ora_on2_ven,Venerdi.HH_on2	{R:"6$FB:Venerdi"}
(*) INT
059B1EA8  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; %M100+72
059B1EAF  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+280

#126		MOVE	Min_on2_ven,Venerdi.MM_on2	{R:"6$FB:Venerdi"}
(*) INT
059B1EB6  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; %M100+74
059B1EBD  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+282

#127		MOVE	Ora_off2_ven,Venerdi.HH_off2	{R:"6$FB:Venerdi"}
(*) INT
059B1EC4  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; %M100+76
059B1ECB  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+284

#128		MOVE	Min_off2_ven,Venerdi.MM_off2	{R:"6$FB:Venerdi"}
(*) INT
059B1ED2  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; %M100+78
059B1ED9  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+286

#129		CAL	Venerdi	{R:"6$FB:Venerdi"}
(*) INT
059B1EE0  50                            push eax
059B1EE1  BB CC CC CC CC                mov ebx, CCCCCCCCH ; $$DATA$$+272
059B1EE6  E8 01 E3 FF FF                call 059B01ECH ; $$CODE$$+492
059B1EEB  58                            pop eax

#130		MOVE	Venerdi.MMs_on1,P51On	{R:"6$FB:Venerdi"}
(*) INT
059B1EEC  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+288
059B1EF3  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+296

#131		MOVE	Venerdi.MMs_off1,P52Off	{R:"6$FB:Venerdi"}
(*) INT
059B1EFA  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+290
059B1F01  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+298

#132		MOVE	Venerdi.MMs_on2,P53On	{R:"6$FB:Venerdi"}
(*) INT
059B1F08  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+292
059B1F0F  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+300

#133		MOVE	Venerdi.MMs_off2,P54Off	{R:"6$FB:Venerdi"}
(*) INT
059B1F16  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+294
059B1F1D  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+302

#134		
#135		
#136		
#137		
#138		(*** Network 7 ***)
#139		
#140		(* Call for FB HHMM_to_MM instance Sabato *)
#141		MOVE	Ora_on1_sab,Sabato.HH_on1	{R:"7$FB:Sabato"}
(*) INT
059B1F24  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; %M100+80
059B1F2B  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+304

#142		MOVE	Min_on1_sab,Sabato.MM_on1	{R:"7$FB:Sabato"}
(*) INT
059B1F32  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; %M100+82
059B1F39  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+306

#143		MOVE	Ora_off1_sab,Sabato.HH_off1	{R:"7$FB:Sabato"}
(*) INT
059B1F40  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; %M100+84
059B1F47  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+308

#144		MOVE	Min_off1_sab,Sabato.MM_off1	{R:"7$FB:Sabato"}
(*) INT
059B1F4E  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; %M100+86
059B1F55  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+310

#145		MOVE	Ora_on2_sab,Sabato.HH_on2	{R:"7$FB:Sabato"}
(*) INT
059B1F5C  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; %M100+88
059B1F63  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+312

#146		MOVE	Min_on2_sab,Sabato.MM_on2	{R:"7$FB:Sabato"}
(*) INT
059B1F6A  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; %M100+90
059B1F71  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+314

#147		MOVE	Ora_off2_sab,Sabato.HH_off2	{R:"7$FB:Sabato"}
(*) INT
059B1F78  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; %M100+92
059B1F7F  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+316

#148		MOVE	Min_off2_sab,Sabato.MM_off2	{R:"7$FB:Sabato"}
(*) INT
059B1F86  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; %M100+94
059B1F8D  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+318

#149		CAL	Sabato	{R:"7$FB:Sabato"}
(*) INT
059B1F94  50                            push eax
059B1F95  BB CC CC CC CC                mov ebx, CCCCCCCCH ; $$DATA$$+304
059B1F9A  E8 4D E2 FF FF                call 059B01ECH ; $$CODE$$+492
059B1F9F  58                            pop eax

#150		MOVE	Sabato.MMs_on1,P61On	{R:"7$FB:Sabato"}
(*) INT
059B1FA0  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+320
059B1FA7  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+328

#151		MOVE	Sabato.MMs_off1,P62Off	{R:"7$FB:Sabato"}
(*) INT
059B1FAE  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+322
059B1FB5  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+330

#152		MOVE	Sabato.MMs_on2,P63On	{R:"7$FB:Sabato"}
(*) INT
059B1FBC  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+324
059B1FC3  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+332

#153		MOVE	Sabato.MMs_off2,P64Off	{R:"7$FB:Sabato"}
(*) INT
059B1FCA  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+326
059B1FD1  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+334

#154		
#155		
#156		
#157		
#158		(*** Network 8 ***)
#159		
#160		(* Call for FB HHMM_to_MM instance Domenica *)
#161		MOVE	Ora_on1_dom,Domenica.HH_on1	{R:"8$FB:Domenica"}
(*) INT
059B1FD8  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; %M100+96
059B1FDF  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+336

#162		MOVE	Min_on1_dom,Domenica.MM_on1	{R:"8$FB:Domenica"}
(*) INT
059B1FE6  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; %M100+98
059B1FED  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+338

#163		MOVE	Ora_off1_dom,Domenica.HH_off1	{R:"8$FB:Domenica"}
(*) INT
059B1FF4  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; %M100+100
059B1FFB  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+340

#164		MOVE	Min_off1_dom,Domenica.MM_off1	{R:"8$FB:Domenica"}
(*) INT
059B2002  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; %M100+102
059B2009  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+342

#165		MOVE	Ora_on2_dom,Domenica.HH_on2	{R:"8$FB:Domenica"}
(*) INT
059B2010  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; %M100+104
059B2017  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+344

#166		MOVE	Min_on2_dom,Domenica.MM_on2	{R:"8$FB:Domenica"}
(*) INT
059B201E  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; %M100+106
059B2025  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+346

#167		MOVE	Ora_off2_dom,Domenica.HH_off2	{R:"8$FB:Domenica"}
(*) INT
059B202C  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; %M100+108
059B2033  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+348

#168		MOVE	Min_off2_dom,Domenica.MM_off2	{R:"8$FB:Domenica"}
(*) INT
059B203A  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; %M100+110
059B2041  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+350

#169		CAL	Domenica	{R:"8$FB:Domenica"}
(*) INT
059B2048  50                            push eax
059B2049  BB CC CC CC CC                mov ebx, CCCCCCCCH ; $$DATA$$+336
059B204E  E8 99 E1 FF FF                call 059B01ECH ; $$CODE$$+492
059B2053  58                            pop eax

#170		MOVE	Domenica.MMs_on1,P71On	{R:"8$FB:Domenica"}
(*) INT
059B2054  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+352
059B205B  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+360

#171		MOVE	Domenica.MMs_off1,P72Off	{R:"8$FB:Domenica"}
(*) INT
059B2062  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+354
059B2069  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+362

#172		MOVE	Domenica.MMs_on2,P73On	{R:"8$FB:Domenica"}
(*) INT
059B2070  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+356
059B2077  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+364

#173		MOVE	Domenica.MMs_off2,P74Off	{R:"8$FB:Domenica"}
(*) INT
059B207E  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+358
059B2085  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+366

#174		
#175		
#176		
#177		
#178		(*** Network 9 ***)
#179		
#180		(* Call for FB OnOffCalendar instance onoff *)
#181		MOVE	DayWeek,onoff.Giorno_settimana	{R:"9$FB:onoff"}
(*) INT
059B208C  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+138
059B2093  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+370

#182		MOVE	Ora,onoff.Ora	{R:"9$FB:onoff"}
(*) INT
059B209A  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+140
059B20A1  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+372

#183		MOVE	Minuto,onoff.Minuto	{R:"9$FB:onoff"}
(*) INT
059B20A8  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+142
059B20AF  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+374

#184		MOVE	P11On,onoff.P11On	{R:"9$FB:onoff"}
(*) INT
059B20B6  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+168
059B20BD  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+376

#185		MOVE	P12Off,onoff.P12Off	{R:"9$FB:onoff"}
(*) INT
059B20C4  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+170
059B20CB  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+378

#186		MOVE	P13On,onoff.P13On	{R:"9$FB:onoff"}
(*) INT
059B20D2  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+172
059B20D9  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+380

#187		MOVE	P14Off,onoff.P14Off	{R:"9$FB:onoff"}
(*) INT
059B20E0  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+174
059B20E7  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+382

#188		MOVE	P21On,onoff.P21On	{R:"9$FB:onoff"}
(*) INT
059B20EE  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+200
059B20F5  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+384

#189		MOVE	P22Off,onoff.P22Off	{R:"9$FB:onoff"}
(*) INT
059B20FC  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+202
059B2103  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+386

#190		MOVE	P23On,onoff.P23On	{R:"9$FB:onoff"}
(*) INT
059B210A  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+204
059B2111  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+388

#191		MOVE	P24Off,onoff.P24Off	{R:"9$FB:onoff"}
(*) INT
059B2118  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+206
059B211F  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+390

#192		MOVE	P31On,onoff.P31On	{R:"9$FB:onoff"}
(*) INT
059B2126  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+232
059B212D  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+392

#193		MOVE	P32Off,onoff.P32Off	{R:"9$FB:onoff"}
(*) INT
059B2134  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+234
059B213B  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+394

#194		MOVE	P33On,onoff.P33On	{R:"9$FB:onoff"}
(*) INT
059B2142  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+236
059B2149  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+396

#195		MOVE	P34Off,onoff.P34Off	{R:"9$FB:onoff"}
(*) INT
059B2150  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+238
059B2157  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+398

#196		MOVE	P41On,onoff.P41On	{R:"9$FB:onoff"}
(*) INT
059B215E  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+264
059B2165  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+400

#197		MOVE	P42Off,onoff.P42Off	{R:"9$FB:onoff"}
(*) INT
059B216C  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+266
059B2173  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+402

#198		MOVE	P43On,onoff.P43On	{R:"9$FB:onoff"}
(*) INT
059B217A  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+268
059B2181  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+404

#199		MOVE	P44Off,onoff.P44Off	{R:"9$FB:onoff"}
(*) INT
059B2188  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+270
059B218F  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+406

#200		MOVE	P51On,onoff.P51On	{R:"9$FB:onoff"}
(*) INT
059B2196  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+296
059B219D  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+408

#201		MOVE	P52Off,onoff.P52Off	{R:"9$FB:onoff"}
(*) INT
059B21A4  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+298
059B21AB  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+410

#202		MOVE	P53On,onoff.P53On	{R:"9$FB:onoff"}
(*) INT
059B21B2  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+300
059B21B9  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+412

#203		MOVE	P54Off,onoff.P54Off	{R:"9$FB:onoff"}
(*) INT
059B21C0  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+302
059B21C7  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+414

#204		MOVE	P61On,onoff.P61On	{R:"9$FB:onoff"}
(*) INT
059B21CE  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+328
059B21D5  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+416

#205		MOVE	P62Off,onoff.P62Off	{R:"9$FB:onoff"}
(*) INT
059B21DC  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+330
059B21E3  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+418

#206		MOVE	P63On,onoff.P63On	{R:"9$FB:onoff"}
(*) INT
059B21EA  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+332
059B21F1  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+420

#207		MOVE	P64Off,onoff.P64Off	{R:"9$FB:onoff"}
(*) INT
059B21F8  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+334
059B21FF  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+422

#208		MOVE	P71On,onoff.P71On	{R:"9$FB:onoff"}
(*) INT
059B2206  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+360
059B220D  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+424

#209		MOVE	P72Off,onoff.P72Off	{R:"9$FB:onoff"}
(*) INT
059B2214  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+362
059B221B  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+426

#210		MOVE	P73On,onoff.P73On	{R:"9$FB:onoff"}
(*) INT
059B2222  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+364
059B2229  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+428

#211		MOVE	P74Off,onoff.P74Off	{R:"9$FB:onoff"}
(*) INT
059B2230  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+366
059B2237  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+430

#212		MOVE	Lun_enabled,onoff.Lun_enabled	{R:"9$FB:onoff"}
(*) INT
059B223E  33 C0                         xor eax, eax
059B2240  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+131
059B2246  84 C0                         test al, al
059B2248  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+432

#213		MOVE	Mar_enabled,onoff.Mar_enabled	{R:"9$FB:onoff"}
(*) BOOL
059B224F  33 C0                         xor eax, eax
059B2251  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+440
059B2257  84 C0                         test al, al
059B2259  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+433

#214		MOVE	Mer_enabled,onoff.Mer_enabled	{R:"9$FB:onoff"}
(*) BOOL
059B2260  33 C0                         xor eax, eax
059B2262  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+441
059B2268  84 C0                         test al, al
059B226A  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+434

#215		MOVE	Gio_enabled,onoff.Gio_enabled	{R:"9$FB:onoff"}
(*) BOOL
059B2271  33 C0                         xor eax, eax
059B2273  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+442
059B2279  84 C0                         test al, al
059B227B  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+435

#216		MOVE	Ven_enabled,onoff.Ven_enabled	{R:"9$FB:onoff"}
(*) BOOL
059B2282  33 C0                         xor eax, eax
059B2284  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+443
059B228A  84 C0                         test al, al
059B228C  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+436

#217		MOVE	Sab_enabled,onoff.Sab_enabled	{R:"9$FB:onoff"}
(*) BOOL
059B2293  33 C0                         xor eax, eax
059B2295  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+444
059B229B  84 C0                         test al, al
059B229D  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+437

#218		MOVE	Dom_enabled,onoff.Dom_enabled	{R:"9$FB:onoff"}
(*) BOOL
059B22A4  33 C0                         xor eax, eax
059B22A6  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+445
059B22AC  84 C0                         test al, al
059B22AE  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+438

#219		CAL	onoff	{R:"9$FB:onoff"}
(*) BOOL
059B22B5  50                            push eax
059B22B6  BB CC CC CC CC                mov ebx, CCCCCCCCH ; $$DATA$$+368
059B22BB  E8 BA DF FF FF                call 059B027AH ; $$CODE$$+634
059B22C0  58                            pop eax

#220		MOVE	onoff.OnByCalendar,CalendarOnOff	{R:"9$FB:onoff"}
(*) BOOL
059B22C1  33 C0                         xor eax, eax
059B22C3  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+439
059B22C9  84 C0                         test al, al
059B22CB  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+53

059B22D2  61                            popad
059B22D3  5D                            pop ebp

059B22D4  C3                            ret

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
059B22D5  C3                            ret


*** OUTPUT:
059B22D6  C3                            ret



**************************************************
	Task Back init code
**************************************************

059B22D7  55                            push ebp
059B22D8  8B EC                         mov ebp, esp

Var init: P11On = 480
059B22DA  66 C7 05 CC CC CC CC E0 01    mov word ptr [CCCCCCCCH], 01E0H ; $$DATA$$+376

Var init: P12Off = 750
059B22E3  66 C7 05 CC CC CC CC EE 02    mov word ptr [CCCCCCCCH], 02EEH ; $$DATA$$+378

Var init: P13On = 840
059B22EC  66 C7 05 CC CC CC CC 48 03    mov word ptr [CCCCCCCCH], 0348H ; $$DATA$$+380

Var init: P14Off = 1080
059B22F5  66 C7 05 CC CC CC CC 38 04    mov word ptr [CCCCCCCCH], 0438H ; $$DATA$$+382

Var init: P21On = 480
059B22FE  66 C7 05 CC CC CC CC E0 01    mov word ptr [CCCCCCCCH], 01E0H ; $$DATA$$+384

Var init: P22Off = 750
059B2307  66 C7 05 CC CC CC CC EE 02    mov word ptr [CCCCCCCCH], 02EEH ; $$DATA$$+386

Var init: P23On = 840
059B2310  66 C7 05 CC CC CC CC 48 03    mov word ptr [CCCCCCCCH], 0348H ; $$DATA$$+388

Var init: P24Off = 1080
059B2319  66 C7 05 CC CC CC CC 38 04    mov word ptr [CCCCCCCCH], 0438H ; $$DATA$$+390

Var init: P31On = 480
059B2322  66 C7 05 CC CC CC CC E0 01    mov word ptr [CCCCCCCCH], 01E0H ; $$DATA$$+392

Var init: P32Off = 750
059B232B  66 C7 05 CC CC CC CC EE 02    mov word ptr [CCCCCCCCH], 02EEH ; $$DATA$$+394

Var init: P33On = 840
059B2334  66 C7 05 CC CC CC CC 48 03    mov word ptr [CCCCCCCCH], 0348H ; $$DATA$$+396

Var init: P34Off = 1080
059B233D  66 C7 05 CC CC CC CC 38 04    mov word ptr [CCCCCCCCH], 0438H ; $$DATA$$+398

Var init: P41On = 480
059B2346  66 C7 05 CC CC CC CC E0 01    mov word ptr [CCCCCCCCH], 01E0H ; $$DATA$$+400

Var init: P42Off = 750
059B234F  66 C7 05 CC CC CC CC EE 02    mov word ptr [CCCCCCCCH], 02EEH ; $$DATA$$+402

Var init: P43On = 840
059B2358  66 C7 05 CC CC CC CC 48 03    mov word ptr [CCCCCCCCH], 0348H ; $$DATA$$+404

Var init: P44Off = 1080
059B2361  66 C7 05 CC CC CC CC 38 04    mov word ptr [CCCCCCCCH], 0438H ; $$DATA$$+406

Var init: P51On = 480
059B236A  66 C7 05 CC CC CC CC E0 01    mov word ptr [CCCCCCCCH], 01E0H ; $$DATA$$+408

Var init: P52Off = 750
059B2373  66 C7 05 CC CC CC CC EE 02    mov word ptr [CCCCCCCCH], 02EEH ; $$DATA$$+410

Var init: P53On = 840
059B237C  66 C7 05 CC CC CC CC 48 03    mov word ptr [CCCCCCCCH], 0348H ; $$DATA$$+412

Var init: P54Off = 1080
059B2385  66 C7 05 CC CC CC CC 38 04    mov word ptr [CCCCCCCCH], 0438H ; $$DATA$$+414

Var init: P61On = 480
059B238E  66 C7 05 CC CC CC CC E0 01    mov word ptr [CCCCCCCCH], 01E0H ; $$DATA$$+416

Var init: P62Off = 750
059B2397  66 C7 05 CC CC CC CC EE 02    mov word ptr [CCCCCCCCH], 02EEH ; $$DATA$$+418

Var init: P63On = 840
059B23A0  66 C7 05 CC CC CC CC 48 03    mov word ptr [CCCCCCCCH], 0348H ; $$DATA$$+420

Var init: P64Off = 1080
059B23A9  66 C7 05 CC CC CC CC 38 04    mov word ptr [CCCCCCCCH], 0438H ; $$DATA$$+422

Var init: P71On = 480
059B23B2  66 C7 05 CC CC CC CC E0 01    mov word ptr [CCCCCCCCH], 01E0H ; $$DATA$$+424

Var init: P72Off = 750
059B23BB  66 C7 05 CC CC CC CC EE 02    mov word ptr [CCCCCCCCH], 02EEH ; $$DATA$$+426

Var init: P73On = 840
059B23C4  66 C7 05 CC CC CC CC 48 03    mov word ptr [CCCCCCCCH], 0348H ; $$DATA$$+428

Var init: P74Off = 1080
059B23CD  66 C7 05 CC CC CC CC 38 04    mov word ptr [CCCCCCCCH], 0438H ; $$DATA$$+430

Var init: Lun_enabled = TRUE
059B23D6  C6 05 CC CC CC CC 01          mov byte ptr [CCCCCCCCH], 01H ; $$DATA$$+432

Var init: Mar_enabled = TRUE
059B23DD  C6 05 CC CC CC CC 01          mov byte ptr [CCCCCCCCH], 01H ; $$DATA$$+433

Var init: Mer_enabled = TRUE
059B23E4  C6 05 CC CC CC CC 01          mov byte ptr [CCCCCCCCH], 01H ; $$DATA$$+434

Var init: Gio_enabled = TRUE
059B23EB  C6 05 CC CC CC CC 01          mov byte ptr [CCCCCCCCH], 01H ; $$DATA$$+435

Var init: Ven_enabled = TRUE
059B23F2  C6 05 CC CC CC CC 01          mov byte ptr [CCCCCCCCH], 01H ; $$DATA$$+436

059B23F9  8B E5                         mov esp, ebp
059B23FB  5D                            pop ebp

059B23FC  C3                            ret



**************************************************
	Global init code
**************************************************

059B2410  55                            push ebp
059B2411  8B EC                         mov ebp, esp

Var init: ms_preaccensione = 60
059B2413  C7 05 CC CC CC CC 3C 00 00 00 mov dword ptr [CCCCCCCCH], 0000003CH ; $$DATA$$+108

Var init: P11On = 480
059B241D  66 C7 05 CC CC CC CC E0 01    mov word ptr [CCCCCCCCH], 01E0H ; $$DATA$$+168

Var init: P12Off = 780
059B2426  66 C7 05 CC CC CC CC 0C 03    mov word ptr [CCCCCCCCH], 030CH ; $$DATA$$+170

Var init: P13On = 900
059B242F  66 C7 05 CC CC CC CC 84 03    mov word ptr [CCCCCCCCH], 0384H ; $$DATA$$+172

Var init: P14Off = 1140
059B2438  66 C7 05 CC CC CC CC 74 04    mov word ptr [CCCCCCCCH], 0474H ; $$DATA$$+174

Var init: P21On = 480
059B2441  66 C7 05 CC CC CC CC E0 01    mov word ptr [CCCCCCCCH], 01E0H ; $$DATA$$+200

Var init: P22Off = 780
059B244A  66 C7 05 CC CC CC CC 0C 03    mov word ptr [CCCCCCCCH], 030CH ; $$DATA$$+202

Var init: P23On = 900
059B2453  66 C7 05 CC CC CC CC 84 03    mov word ptr [CCCCCCCCH], 0384H ; $$DATA$$+204

Var init: P24Off = 1140
059B245C  66 C7 05 CC CC CC CC 74 04    mov word ptr [CCCCCCCCH], 0474H ; $$DATA$$+206

Var init: P31On = 480
059B2465  66 C7 05 CC CC CC CC E0 01    mov word ptr [CCCCCCCCH], 01E0H ; $$DATA$$+232

Var init: P32Off = 780
059B246E  66 C7 05 CC CC CC CC 0C 03    mov word ptr [CCCCCCCCH], 030CH ; $$DATA$$+234

Var init: P33On = 900
059B2477  66 C7 05 CC CC CC CC 84 03    mov word ptr [CCCCCCCCH], 0384H ; $$DATA$$+236

Var init: P34Off = 1140
059B2480  66 C7 05 CC CC CC CC 74 04    mov word ptr [CCCCCCCCH], 0474H ; $$DATA$$+238

Var init: P41On = 480
059B2489  66 C7 05 CC CC CC CC E0 01    mov word ptr [CCCCCCCCH], 01E0H ; $$DATA$$+264

Var init: P42Off = 780
059B2492  66 C7 05 CC CC CC CC 0C 03    mov word ptr [CCCCCCCCH], 030CH ; $$DATA$$+266

Var init: P43On = 900
059B249B  66 C7 05 CC CC CC CC 84 03    mov word ptr [CCCCCCCCH], 0384H ; $$DATA$$+268

Var init: P44Off = 1140
059B24A4  66 C7 05 CC CC CC CC 74 04    mov word ptr [CCCCCCCCH], 0474H ; $$DATA$$+270

Var init: P51On = 480
059B24AD  66 C7 05 CC CC CC CC E0 01    mov word ptr [CCCCCCCCH], 01E0H ; $$DATA$$+296

Var init: P52Off = 780
059B24B6  66 C7 05 CC CC CC CC 0C 03    mov word ptr [CCCCCCCCH], 030CH ; $$DATA$$+298

Var init: P53On = 900
059B24BF  66 C7 05 CC CC CC CC 84 03    mov word ptr [CCCCCCCCH], 0384H ; $$DATA$$+300

Var init: P54Off = 1200
059B24C8  66 C7 05 CC CC CC CC B0 04    mov word ptr [CCCCCCCCH], 04B0H ; $$DATA$$+302

Var init: P61On = 480
059B24D1  66 C7 05 CC CC CC CC E0 01    mov word ptr [CCCCCCCCH], 01E0H ; $$DATA$$+328

Var init: P62Off = 780
059B24DA  66 C7 05 CC CC CC CC 0C 03    mov word ptr [CCCCCCCCH], 030CH ; $$DATA$$+330

Var init: P63On = 900
059B24E3  66 C7 05 CC CC CC CC 84 03    mov word ptr [CCCCCCCCH], 0384H ; $$DATA$$+332

Var init: P64Off = 1140
059B24EC  66 C7 05 CC CC CC CC 74 04    mov word ptr [CCCCCCCCH], 0474H ; $$DATA$$+334

Var init: P71On = 480
059B24F5  66 C7 05 CC CC CC CC E0 01    mov word ptr [CCCCCCCCH], 01E0H ; $$DATA$$+360

Var init: P72Off = 780
059B24FE  66 C7 05 CC CC CC CC 0C 03    mov word ptr [CCCCCCCCH], 030CH ; $$DATA$$+362

Var init: P73On = 900
059B2507  66 C7 05 CC CC CC CC 84 03    mov word ptr [CCCCCCCCH], 0384H ; $$DATA$$+364

Var init: P74Off = 1140
059B2510  66 C7 05 CC CC CC CC 74 04    mov word ptr [CCCCCCCCH], 0474H ; $$DATA$$+366

Var init: $$POUCBARRAY$$Back = 0
059B2519  B9 CC CC CC CC                mov ecx, CCCCCCCCH ; $$DATA$$+556
059B251E  89 0D CC CC CC CC             mov [CCCCCCCCH], ecx ; $$DATA$$+448

Var init: $$POUCBARRAY$$Boot = 0
059B2524  B9 CC CC CC CC                mov ecx, CCCCCCCCH ; $$DATA$$+562
059B2529  89 0D CC CC CC CC             mov [CCCCCCCCH], ecx ; $$DATA$$+456

Var init: $$POUCBARRAY$$Slow = 0
059B252F  B9 CC CC CC CC                mov ecx, CCCCCCCCH ; $$DATA$$+568
059B2534  89 0D CC CC CC CC             mov [CCCCCCCCH], ecx ; $$DATA$$+464
059B253A  B9 CC CC CC CC                mov ecx, CCCCCCCCH ; $$DATA$$+574
059B253F  89 0D CC CC CC CC             mov [CCCCCCCCH], ecx ; $$DATA$$+464
059B2545  B9 CC CC CC CC                mov ecx, CCCCCCCCH ; $$DATA$$+580
059B254A  89 0D CC CC CC CC             mov [CCCCCCCCH], ecx ; $$DATA$$+464
059B2550  B9 CC CC CC CC                mov ecx, CCCCCCCCH ; $$DATA$$+586
059B2555  89 0D CC CC CC CC             mov [CCCCCCCCH], ecx ; $$DATA$$+464

059B255B  8B E5                         mov esp, ebp
059B255D  5D                            pop ebp

059B255E  C3                            ret



**************************************************
	Global RETAIN init code
**************************************************

059B255F  55                            push ebp
059B2560  8B EC                         mov ebp, esp

059B2562  8B E5                         mov esp, ebp
059B2564  5D                            pop ebp

059B2565  C3                            ret



**************************************************
	Task $$VirtualTables init code
**************************************************

059B2566  55                            push ebp
059B2567  8B EC                         mov ebp, esp

059B2569  8B E5                         mov esp, ebp
059B256B  5D                            pop ebp

059B256C  C3                            ret



********************************************
MEMORY MAP
********************************************

Code area type:          		       main code
Start code area:          		00000000059B0000h
End code area:            		00000000059B3BF4h
Code size:                		00003BF4h

Start local data area:    		0000000005980000h
End local data area:      		0000000005980250h
Local data size:          		00000250h

Start retentive data area:		0000000005990000h
End retentive data area:  		0000000005990000h
Retentive data size:      		00000000h

Start bit data area:      		0000000000000000h
End bit data area:        		0000000000000000h
Bit data size:            		00000000h



********************************************
CODE ID:                                FE07A250
DEBUG MEMO ID:                          00000664
FULL MEMO ID:                           00004772
RELOCATION ADDR:                        00000000059B0000
********************************************
